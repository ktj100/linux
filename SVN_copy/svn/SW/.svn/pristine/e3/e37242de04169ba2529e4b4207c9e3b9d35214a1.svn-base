#!/usr/bin/env python3

# This file provides supporting classes/functions to all the BARSM Python scripts.

import sys
import os.path
sys.path.append(os.path.join(os.path.dirname(__file__), '../utils'))

import subprocess
import proc
import time
import datetime
import random
import shutil
import os
import log
import signal
import socket
import multiprocessing
import struct
import select
import re

barsm_top_loc = os.path.join(os.path.dirname(__file__), '../../barsm')
barsm_loc = os.path.join(os.path.dirname(__file__), '../../barsm/src')
apps_loc = os.path.join(os.path.dirname(__file__), '../utils/dummies')


#TCP
TCP_IP                              = "127.0.0.1"
TCP_PORT                            = 8000

#UDP
UDP_IP                              = "225.0.0.37"
UDP_PORT                            = 4096

#COMMAND ID
CMD_OPEN                            = 8
CMD_BARSM_TO_AACM                   = 12
CMD_SYSINIT                         = 11
CMD_AACM_TO_BARSM_MSG               = 14
CMD_AACM_TO_BARSM_MSG_ACK           = 15
CMD_BARSM_TO_AACM_INIT              = 16
CMD_BARSM_TO_AACM_INIT_ACK          = 17
CMD_BARSM_TO_AACM_PROCESSES         = 18

#Message and Data Lengths
CMD_BARSM_TO_AACM_LEN               = 14
CMD_BARSM_TO_AACM_DATA_LEN          = 10
CMD_BARSM_TO_AACM_INIT_LEN          = 4
CMD_BARSM_TO_AACM_INIT_DATA_LEN     = 0
CMD_AACM_TO_BARSM_ACK_LEN           = 6
CMD_AACM_TO_BARSM_ACK_DATA_LEN      = 2

#UNPACK STRING FORMATS (see enums from simm_functions.h)
# B is 1 byte, H is 2 bytes, I is 4 bytes
UDP_OPEN_MSG_FMT                    = '=HHI'
BARSM_TO_AACM_ACK_FMT               = '=HHIH'
SYS_INIT_MSG_FMT                    = '=HH'
BARSM_TO_AACM_INIT_FMT              = '=HH'
BARSM_TO_AACM_INIT_ACK_FMT          = '=HH'
AACM_TO_BARSM_ACK_FMT               = '=HHH'
BARSM_TO_AACM_RECEIVE_FMT           = '=HHIIH'
AACM_TO_BARSM_MSG_FMT               = '=HHIHII'

TCPserver = 0
TCPconn = 0
UDPsock = 0
barsm_subproc = None
barsm_spawned_pids = []
barsm_pid = 0

def remove():
    # Ensure that there are instances of barsm (or valgrind) running
    kill_procs()

    shutil.rmtree('/opt/rc360', ignore_errors=True)
    for d in ['system', 'modules/GE', 'modules/TPA', 'apps/GE', 'apps/TPA']:
        os.makedirs('/opt/rc360/' + d)


def random_fail_start():
    random.seed()
    r = random.randint(1, 8)

    subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/system/aacm', shell=True)

    if 1 == r:
        subprocess.call('gcc '+apps_loc+'/zero_sec.c -o /opt/rc360/modules/GE/gemod', shell=True)
    elif 5 == r:
        subprocess.call('cp '+apps_loc+'/non_exec.c /opt/rc360/modules/GE/', shell=True)
    else:
        subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/modules/GE/gemod', shell=True)

    if 2 == r:
        subprocess.call('gcc '+apps_loc+'/zero_sec.c -o /opt/rc360/modules/TPA/tpamod', shell=True)
    elif 6 == r:
        subprocess.call('cp '+apps_loc+'/non_exec.c /opt/rc360/modules/TPA/', shell=True)
    else:
        subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/modules/TPA/tpamod', shell=True)

    if 3 == r:
        subprocess.call('gcc '+apps_loc+'/zero_sec.c -o /opt/rc360/apps/GE/geapp', shell=True)
    elif 7 == r:
        subprocess.call('cp '+apps_loc+'/non_exec.c /opt/rc360/apps/GE/', shell=True)
    else:
        subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/apps/GE/geapp', shell=True)

    if 4 == r:
        subprocess.call('gcc '+apps_loc+'/zero_sec.c -o /opt/rc360/apps/TPA/tpaapp', shell=True)
    elif 8 == r:
        subprocess.call('cp '+apps_loc+'/non_exec.c /opt/rc360/apps/TPA/', shell=True)
    else:
        subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/apps/TPA/tpaapp', shell=True)


def start_barsm():
    # start BARSM
    test_output = open('test.out', 'a')

    subprocess.call('cd {}; make debug'.format(barsm_top_loc), shell=True)

    global barsm_subproc
    args = [
        'valgrind',
        '--read-var-info=yes',
        '--leak-check=full',
        '--track-origins=yes',
        '--show-reachable=yes',
        '--malloc-fill=B5',
        '--free-fill=4A',
        '{}/build/barsm'.format(barsm_top_loc),
    ]
    barsm_subproc = subprocess.Popen(args, stdout=test_output, stderr=subprocess.STDOUT)
    assert barsm_subproc

    time.sleep(0.1)

    # Get BARSM PID
    global barsm_pid
    barsm_pid = int(barsm_subproc.pid)

    check_barsm_running()

def get_barsm_child_pids():
    global barsm_pid
    info = proc.findchild(barsm_pid)
    return info

def aacm_setup():
    success = True
    aacmStarted = False
    global barsm_pid
    while False == aacmStarted:
        check_barsm_running()
        all_child = proc.findchild(barsm_pid)
        if 1 == len(all_child):
            aacmStarted = True

    global TCPconn, TCPserver, UDPsock
    TCPconn, TCPserver = TCPsetup()  # both return values are objects
    UDPsock = UDPsetup()

    success = barsmToAacmInit(TCPconn)
    if success:
        barsmToAacmInitAck(TCPconn)

    sysInit(UDPsock)

    return success


def TCPsetup():
    serversock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    serversock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    try:
        serversock.bind( (TCP_IP, TCP_PORT) )
    except msg:
        print( 'TCP Bind failed. Error code: ' + str(msg[0]) + 'Error message: ' + msg[1])
        conn.close()
        serversock.close()
        sys.exit()

    serversock.listen(1)
    (connsock, connaddr) = serversock.accept()
    print('CONNECT FROM {}'.format(connaddr))
    return connsock, serversock


def UDPsetup():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind( (UDP_IP, UDP_PORT) )
    mreq = struct.pack("=4sl", socket.inet_aton(UDP_IP), socket.INADDR_ANY)
    s.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
    print('UDP Socket setup complete')
    return s


def barsmToAacmInit(connsock):
    success = True

    populateChildren()

    btaInit = connsock.recv(1024)
    retBytes = len(btaInit)

    if CMD_BARSM_TO_AACM_INIT_LEN != retBytes:
        success = False
        print('ERROR: Received BARSM to AACM init was not 4 bytes!')
        print('Message: ', btaInit)
        print('Number of bytes: ', retBytes)

    if success:
        success = checkB2AInit(struct.unpack(BARSM_TO_AACM_INIT_FMT, btaInit))

    return (success)

def checkB2AInit(msg):
    success = True

    if CMD_BARSM_TO_AACM_INIT != msg[0]:
        success = False
        print("ERROR: Command ID wrong: ", msg[0])
        print("    Should be '16'")

    if CMD_BARSM_TO_AACM_INIT_DATA_LEN != msg[1]:
        success = False
        print("ERROR: Length wrong: ", msg[1])
        print("    Should be '0'")

    return(success)

def barsmToAacmInitAck(connsock):
    barsmToAacmInitAckData = [CMD_BARSM_TO_AACM_INIT_ACK, 0]
    connsock.send(struct.pack(BARSM_TO_AACM_INIT_ACK_FMT, barsmToAacmInitAckData[1], barsmToAacmInitAckData[0]))

def aacmToBarsmMsg(connsock): # B is 1 byte, H is 2 bytes, I is 4 bytes
    all_pids = [0,0]

    all_child = proc.findchild(barsm_pid)
    all_pids = [int(c['pid']) for c in all_child]

    byteLength = 2+2+4+2+4+4

    aacmToBarsmData = [CMD_AACM_TO_BARSM_MSG, (byteLength), int(barsm_pid), 2, all_pids[0], all_pids[1]]

    connsock.send(struct.pack(AACM_TO_BARSM_MSG_FMT, aacmToBarsmData[0], \
        aacmToBarsmData[1], aacmToBarsmData[2], aacmToBarsmData[3], aacmToBarsmData[4], aacmToBarsmData[5]))

    return all_child

def checkForRestart(appsToRestart):
    oldChildPid = []
    newChildPid = []
    oldChildName = []
    newChildName = []
    newChildState = []

    if appsToRestart == []:
        print('--Empty list')
        return False

    global barsm_pid
    childProc = proc.findchild(barsm_pid)

    for nc in childProc:
        newChildPid.append(nc['pid'])
        newChildName.append(nc['name'])
        newChildState.append(nc['state'])

    for oc in appsToRestart:
        oldChildPid.append(oc['pid'])
        oldChildName.append(oc['name'])

    #checks that the process exists
    for c in oldChildName:
        if (not(c in newChildName)):
            print('--process name not found')
            return False

    # checks the old one was stopped and the new one is running
    for oc in oldChildPid:
        index = 0
        for nc in newChildPid:
            #checks that it is not a zombie process
            if ((nc == oc) and ('Z' != newChildState[index])):
                print('-- matching process id found')
                return False

            index = index + 1

    return True


def aacmToBarsmAck(connsock, expectedERR):
    msgNotReceived = False

    populateChildren()

    atbInit = connsock.recv(1024)
    retBytes = len(atbInit)

    if CMD_AACM_TO_BARSM_ACK_LEN != retBytes:
        msgNotReceived = True
        print('ERROR: Received AACM to BARSM was not 6 bytes!')
        print('Number of bytes: ', retBytes)
    else:
        success = checkA2BAck(struct.unpack(AACM_TO_BARSM_ACK_FMT, atbInit), expectedERR)

        if False == success:
            #bad message so error
            msgNotReceived = True

    return msgNotReceived

def checkA2BAck(msg, expectedERR):
    print('Checking AACM to BARSM Ack Message!')
    success = True

    if CMD_AACM_TO_BARSM_MSG_ACK != msg[0]:
        success = False
        print("ERROR: Command ID wrong: ", msg[0])
        print("    Should be '{}'".format(CMD_AACM_TO_BARSM_MSG_ACK))

    if CMD_AACM_TO_BARSM_ACK_DATA_LEN != msg[1]:
        success = False
        print("ERROR: Length wrong: ", msg[1])
        print("    Should be '{}'".format(CMD_AACM_TO_BARSM_ACK_DATA_LEN))

    #range from 0-12
    if msg[2] != expectedERR:
        success = False
        print("ERROR: Error wrong: ", msg[2])
        print("    Should be '{}'".format(expectedERR))
        assert msg[2] == expectedERR

    return(success)

def receiveBarsmToAacm(connsock, expectedERR, expectedName):
    msgNotReceived = False
    pid = 0

    #update the children list
    populateChildren()

    btaInit = connsock.recv(1024)
    retBytes = len(btaInit)

    if CMD_BARSM_TO_AACM_LEN == retBytes:
        unpackedData = struct.unpack(BARSM_TO_AACM_RECEIVE_FMT, btaInit)
        success = checkB2A(unpackedData, expectedERR, expectedName)
        pid = unpackedData[2]

        if False == success:
            #bad message so error
            msgNotReceived = True
        else:
            sendBarsmToAacmAck(connsock, pid)
    else:
        msgNotReceived = True
        print('ERROR: Received BARSM to AACM was not 14 bytes!')
        print('Message: ', btaInit)
        print('Number of bytes: ', retBytes)


    return msgNotReceived, pid

def checkB2A(msg, expectedERR, expectedName):
    global barsm_pid
    success = True

    #print('Checking BARSM to AACM Message! {}'.format(msg))

    if CMD_BARSM_TO_AACM != msg[0]:
        success = False
        print("ERROR: Command ID wrong: ", msg[0])
        print("    Should be '{}'".format(CMD_BARSM_TO_AACM))

    if CMD_BARSM_TO_AACM_DATA_LEN != msg[1]:
        success = False
        print("ERROR: Length wrong: ", msg[1])
        print("    Should be '{}'".format(CMD_BARSM_TO_AACM_DATA_LEN))

    if msg[2] in barsm_spawned_pids:
        unpackedName = struct.unpack('=BBBB', struct.pack("=I", msg[3]))
        procName = chr(unpackedName[0])+chr(unpackedName[1])+chr(unpackedName[2])+chr(unpackedName[3])

        if expectedName == procName:
            success = True
        else:
            success = False
            print("ERROR: Name wrong: {}".format(procName))
            print("    Should match corresponding PID process name {}".format(expectedName))
    else:
        success = False
        print("ERROR: PID wrong: ", msg[2])
        print("    Should be in list {}".format(barsm_spawned_pids))

    #range from 0-12
    if msg[4] != expectedERR:
        success = False
        print("ERROR: Error wrong: ", msg[2])
        print("    Should be '{}'".format(expectedERR))
        assert msg[2] == expectedERR

    return(success)

def sendBarsmToAacmAck(connsock, pid):

    #update the children list
    populateChildren()

    byteLength = 2+2+4+2

    aacmToBarsmData = [13, (byteLength), int(pid), 0]

    connsock.send(struct.pack(BARSM_TO_AACM_ACK_FMT, aacmToBarsmData[0], \
        aacmToBarsmData[1], aacmToBarsmData[2], aacmToBarsmData[3]))


def sysInit(connsock):
    UDPopenMsg, SenderAddr = connsock.recvfrom(1024)
    if 8 == len(UDPopenMsg):
        msg = struct.unpack(UDP_OPEN_MSG_FMT, UDPopenMsg)
    else:
        print('ERROR: UDP open message was {} bytes rather than 8.'.format(len(UDPopenMsg)))

    # command
    assert msg[0] == CMD_OPEN
    # length
    assert msg[1] == 4
    global barsm_pid
    # BARSM pid
    assert msg[2] == barsm_pid

    print('UDP OPEN DONE!')

    sendSysInitMsg  = [CMD_SYSINIT, 0]
    connsock.sendto((struct.pack(SYS_INIT_MSG_FMT, *sendSysInitMsg )), SenderAddr )
    print('SYS INIT DONE!')

def barsmToAacmProcesses(connsock, expectedData, aacm_pid, nameList, log):
    #update the children list
    populateChildren()

    btaInit = connsock.recv(1024)
    retBytes = len(btaInit)
    assert expectedData['numMsgBytes'] == retBytes

    print('received {} bytes: {}'.format(len(btaInit), btaInit))
    message = struct.unpack(expectedData['unpackFMT'], btaInit)
    print('unpacked = {}'.format(message))
    print('expected = {}'.format(expectedData))
    checkB2AProcs1Child(message, expectedData, aacm_pid, nameList, log)

def get_app_type(proc):
    # app type bits
    #   0:      0 = app, 1 = module
    #   1:      1 if aacm, else 0
    #   2:      1 if barsm, else 0
    #   3:      0 = GE, 1 = TPA
    #   4:      0 (hypervisor)
    #   5:      1 (petalinux)
    #   6+:     unused
    if proc['path'] == '/opt/rc360/apps/GE':
        return 0
    elif proc['path'] == '/opt/rc360/modules/GE':
        return 1
    elif proc['path'] == '/opt/rc360/apps/TPA':
        return 8
    elif proc['path'] == '/opt/rc360/modules/TPA':
        return 9
    else:
        raise Exception('Unexpected process path: {}'.format(proc))

def checkB2AProcs1Child(msg, expectedData, aacm_pid, nameList, log):
    global barsm_pid

    print('Checking BARSM to AACM Processes Message!')

    # navigate to the end of the SYSLOG
    logs = []

    while not logs:
        logs = log.read('BARSM')
    
        if logs:
            gotAppNames = False
            for item in logs:
                if (item['message'][:35] == "DEBUG: Message sent with APP names:"):
                    gotAppNames = True

            if (gotAppNames):
                expectedName = list(filter(lambda t: "DEBUG: Message sent with APP names:" in t['message'], logs))[0]['message']
                expectedNameList = expectedName[-((5*msg[2])-1):].split(',', msg[2])
            else:
                logs = []

    proc_info = [
        { 'pid': barsm_pid, 'name': expectedNameList[0].encode(), 'type': 12 },
        { 'pid': aacm_pid, 'name': expectedNameList[1].encode(), 'type': 2 },
    ]

    print(expectedNameList)
    assert len(expectedNameList) == len(nameList) + 2

    for x in expectedNameList[2:]:
        for n in nameList:
            if x == n['name']:
                app_type = get_app_type(n)
                proc_info.append({ 'pid': int(n['pid']), 'name': n['name'].encode(), 'type': app_type })

    assert msg[0] == CMD_BARSM_TO_AACM_PROCESSES
    assert msg[1] == expectedData['numMsgDataBytes']
    assert msg[2] == expectedData['numProcesses']

    msgIndex = 2
    print('expected {}'.format(proc_info))
    for p in proc_info:
        msgIndex += 1
        assert msg[msgIndex] == p['pid']
        msgIndex += 1
        assert msg[msgIndex] == p['name']
        msgIndex += 1
        assert msg[msgIndex] == p['type']

def waitForLaunch(log=None):
    notComplete = True

    disabled_pat = re.compile(r'NOTICE: Process for (?P<app>[A-Za-z0-9._]+) in (?P<path>[A-Za-z0-9._/]+) disabled permanently! \(0:Success\)')
    launched_pat = re.compile(r'SUCCESS: launched (?P<path>[A-Za-z0-9._/]+)/(?P<app>[A-Za-z0-9._]+) with name (?P<name>[a-z]{4}) with PID (?P<pid>\d+)')

    nameList = []
    while notComplete:
        check_barsm_running()
        logs = log.read('BARSM')

        msg_list = list(filter(lambda t: "COMPLETED: Launch sequence complete!" in t['message'], logs))
        launched_list = [p.groupdict() for p in [launched_pat.match(t['message']) for t in logs] if p]
        disabled_list = [p.groupdict() for p in [disabled_pat.match(t['message']) for t in logs] if p]

        if launched_list:
            for l in launched_list[:]:
                for n in nameList:
                    if n['app'] == l['app'] and n['path'] == l['path']:
                        n['pid'] = l['pid']
                        launched_list.remove(l)
            nameList.extend(launched_list)

        for d in disabled_list:
            for n in nameList[:]:
                if n['app'] == l['app'] and n['path'] == l['path']:
                    nameList.remove(n)

        if msg_list:
            print("Launch Complete message found!")
            notComplete = False

    global barsm_pid, barsm_spawned_pids
    print('BARSM: {}'.format(barsm_pid))
    all_child = proc.findchild(barsm_pid)

    child_pids = set([int(p['pid']) for p in all_child])
    barsm_spawned_pids = list(set(barsm_spawned_pids).union(child_pids))
    child_amount = len(all_child)
    return child_amount, nameList

def populateChildren():
    global barsm_pid, barsm_spawned_pids

    all_child = proc.findchild(barsm_pid)
    child_pids = set([int(p['pid']) for p in all_child])
    barsm_spawned_pids = list(set(barsm_spawned_pids).union(child_pids))

def short_launch():
    subprocess.call('gcc '+apps_loc+'/thirty_sec.c -o /opt/rc360/system/aacm', shell=True)


def norm_launch():

    # clear out all app directories
    remove()

    # place items in directories
    subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/system/aacm', shell=True)
    subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/modules/GE/gemod', shell=True)
    subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/modules/TPA/tpamod', shell=True)
    subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/apps/GE/geapp', shell=True)
    subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/apps/TPA/tpaapp', shell=True)

    # start barsm
    start_barsm()


def launch_bad():
    # place items in directories
    subprocess.call('gcc '+apps_loc+'/thirty_sec.c -o /opt/rc360/system/thirty_aacm', shell=True)
    subprocess.call('gcc '+apps_loc+'/thirty_sec.c -o /opt/rc360/modules/GE/thirty_gemod', shell=True)
    subprocess.call('gcc '+apps_loc+'/thirty_sec.c -o /opt/rc360/modules/TPA/thirty_tpamod', shell=True)
    subprocess.call('gcc '+apps_loc+'/thirty_sec.c -o /opt/rc360/apps/GE/thirty_geapp', shell=True)
    subprocess.call('gcc '+apps_loc+'/thirty_sec.c -o /opt/rc360/apps/TPA/thirty_tpaapp', shell=True)
    subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/modules/GE/gemod', shell=True)
    subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/modules/TPA/tpamod', shell=True)
    subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/apps/GE/geapp', shell=True)
    subprocess.call('gcc '+apps_loc+'/infinite_sec.c -o /opt/rc360/apps/TPA/tpaapp', shell=True)

def check_barsm_running():
    global barsm_subproc
    if barsm_subproc:
        if barsm_subproc.poll():
            raise Exception('BARSM already exited with code {}'.format(barsm_subproc.returncode))
            barsm_subproc = None


def kill_procs():
    global TCPconn, TCPserver, UDPsock, barsm_spawned_pids, barsm_pid, barsm_subproc

    check_barsm_running()

    if barsm_subproc:
        barsm_subproc.kill()
        barsm_subproc = None
        barsm_pid = 0

    # find child PIDs
    for p in barsm_spawned_pids:
        try:
            os.kill(p, signal.SIGKILL)
        except ProcessLookupError:
            pass
    barsm_spawned_pids = []

    if TCPconn:
        TCPconn.close()
        TCPconn = 0

    if TCPserver:
        TCPserver.close()
        TCPserver = 0

    if UDPsock:
        UDPsock.close()
        UDPsock = 0

import atexit
atexit.register(kill_procs)

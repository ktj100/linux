#!/usr/bin/env python3

def clear_old_output(output_name):
    import shutil
    import os.path
    if os.path.isfile(output_name):
        shutil.move(output_name, output_name + '.old')

def find_py_files(x):
    import glob
    import re
    import os.path
    files = glob.glob(os.path.join(x, '*.py'))
    found = []
    for f in files:
        obj = re.match(r'(\S*)/([^. ]*)(?<!__init__)\.py$', f)
        if obj:
            found.append('{}.{}'.format(obj.group(1), obj.group(2)))
    return found

def filter_test(x):
    import importlib
    import sys
    try:
        m = importlib.import_module(x)
        return (x, getattr(m, 'run'))
    except:
        pass

def run_tests(dir_list, test_list=None):
    import itertools
    import time
    # get a list of all files in the test subdirectories
    tests = list(itertools.chain.from_iterable(map(find_py_files, dir_list)))

    # find out which files are valid tests, make sure that the utils directory
    # is in the system path
    tests = [x for x in map(filter_test, tests) if x]

    # randomize the list of tests
    import random
    random.shuffle(tests)

    if test_list:
        tests = [t for t in tests if t[0] in test_list]

    # Run each test
    from . import colors
    passed = colors.colorify(colors.GREEN, 'PASSED')
    failed = colors.colorify(colors.RED, 'FAILED')

    import sys
    import traceback
    num_passed = 0
    num_failed = 0
    for t in tests:
        test_name = colors.colorify(colors.YELLOW, t[0])
        print('running test {name}'.format(name=test_name))
        result = False
        try:
            result = t[1]()
        except:
            print('caught exception while execution of test {name}:\n{tb}'.format(name=test_name, tb=traceback.format_exception(*sys.exc_info())))

        if result:
            num_passed += 1
            status = passed
        else:
            num_failed += 1
            status = failed
        print('test {}: {}'.format(test_name, status))
        time.sleep(2)

    print('\n{3}/{0} tests {1}\n{4}/{0} tests {2}\n'.format(len(tests), passed, failed, num_passed, num_failed))

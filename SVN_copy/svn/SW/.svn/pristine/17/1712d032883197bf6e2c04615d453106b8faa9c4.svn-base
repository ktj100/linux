#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <errno.h>
#include <syslog.h>
#include <string.h>
#include <time.h>
#include <stdbool.h>

#include "sensor.h"
#include "fpga_sim.h"

#define DEBUG_PRINT 9
#define CLOCK_OFFSET_TOLERANCE 2    // in seconds
#define MAX_DATA_PERIOD 60          // in seconds

;

const int32_t MAX_TS_PERIOD = MAX_DATA_PERIOD*9;
static int64_t offset = 0;

/* This function calculates the offset to be added to the cam timestamps to change their relative
 * time (number of clock ticks since startup in FPGA, 1 per 10 ns) to a real-time value. */
void timestamp_offset_config(void)
{
    struct timespec real_time;
    struct timespec time_from_launch;

    int64_t full_real_time;
    int64_t full_time_from_launch;

    errno = 0;
    if ( -1 == clock_gettime(CLOCK_REALTIME, &real_time) ) 
    {
        printf("\nERROR: Time read of CLOCK_REALTIME for offset calculation failed! (%d: %s)\n\n", errno, strerror(errno));
        syslog(LOG_ERR, "%s:%d ERROR: Time read of CLOCK_REALTIME for offset calculation failed! (%d:%s)", \
            __FUNCTION__, __LINE__, errno, strerror(errno));
    }
    if ( -1 == clock_gettime(CLOCK_MONOTONIC, &time_from_launch) ) 
    {
        printf("\nERROR: Time read of CLOCK_MONOTONIC for offset calculation failed! (%d: %s)\n\n", errno, strerror(errno));
        syslog(LOG_ERR, "%s:%d ERROR: Time read of CLOCK_MONOTONIC for offset calculation failed! (%d: %s)", \
            __FUNCTION__, __LINE__, errno, strerror(errno));
    }

    full_real_time = ((real_time.tv_sec * 1000000000L) + real_time.tv_nsec);
    full_time_from_launch = ((time_from_launch.tv_sec * 1000000000L) + time_from_launch.tv_nsec);

    /* Offset value needs to be stored with units of 10 ns */
    offset = (full_real_time - full_time_from_launch) / 10;
}

/* This function allocates storage space for the data values that will be read in from the fpga.
 * Each array of values will store the last MAX_XXXX_PERIOD worth of data, overwriting each value 
 * as new values are read in. Index values will keep track of the location of the newest value
 * read in from the FPGA. */
bool subscribe_config(void)
{
    bool success = true;

    // ALLOCATE SPACE FOR THE STORAGE OF THE LOGICAL VALUES
    // = maximum period of collection time in seconds
    errno = 0;
    pfp_values = (int32_t*)malloc(MAX_DATA_PERIOD * sizeof(int32_t));
    ptlt_values = (int32_t*)malloc(MAX_DATA_PERIOD * sizeof(int32_t));
    ptrt_values = (int32_t*)malloc(MAX_DATA_PERIOD * sizeof(int32_t));
    tcmp_values = (int32_t*)malloc(MAX_DATA_PERIOD * sizeof(int32_t));
    cop_values = (int32_t*)malloc(MAX_DATA_PERIOD * sizeof(int32_t));
    if ( NULL==pfp_values || NULL==ptlt_values || NULL==ptrt_values || NULL==tcmp_values || NULL==cop_values )
    {
        printf("\nERROR: malloc() failed for logical value storage! (%d: %s)\n\n", errno, strerror(errno));
        syslog(LOG_ERR, "%s:%d ERROR: malloc() failed for logical value storage! (%d: %s)", \
            __FUNCTION__, __LINE__, errno, strerror(errno));
        success = false;
    }
    logical_index = MAX_DATA_PERIOD - 1;

    // ALLOCATE SPACE FOR THE STORAGE OF THE TIMESTAMP VALUES
    // = maximum period of collection time in seconds * 9 values per second
    errno = 0;
    cam_secs = (int32_t*)malloc(MAX_TS_PERIOD * sizeof(int32_t));
    cam_nsecs = (int32_t*)malloc(MAX_TS_PERIOD * sizeof(int32_t));
    if ( NULL == cam_secs || NULL == cam_nsecs )
    {
        printf("\nERROR: malloc() failed for timestamp value storage! (%d: %s)\n\n", errno, strerror(errno));
        syslog(LOG_ERR, "%s:%d ERROR: malloc() failed for timestamp value storage! (%d: %s)", \
            __FUNCTION__, __LINE__, errno, strerror(errno));
        success = false;
    }
    timestamp_index = MAX_TS_PERIOD - 1;

    /* FILL ARRAYS WITH ZEROS TO START OFF */
    memset(pfp_values, 0, MAX_DATA_PERIOD * sizeof(int32_t));
    memset(ptlt_values, 0, MAX_DATA_PERIOD * sizeof(int32_t));
    memset(ptrt_values, 0, MAX_DATA_PERIOD * sizeof(int32_t));
    memset(tcmp_values, 0, MAX_DATA_PERIOD * sizeof(int32_t));
    memset(cop_values, 0, MAX_DATA_PERIOD * sizeof(int32_t));
    memset(cam_secs, 0, MAX_TS_PERIOD * sizeof(int32_t));
    memset(cam_nsecs, 0, MAX_TS_PERIOD * sizeof(int32_t));

    return(success);
}

int32_t get_logicals(void)
{
    int32_t voltages[5] = {0,0,0,0,0};

    // READ IN 1 HZ VOLTAGE VALUES
    fpga_sim_voltages(&voltages[0]);

    /* To compensate for storage rollover */
    logical_index = (MAX_DATA_PERIOD-1 <= logical_index)? 0: logical_index+1;

    pfp_values[logical_index] = convert_pfp(voltages[0]);
    ptlt_values[logical_index] = convert_ptxt(voltages[1]);
    ptrt_values[logical_index] = convert_ptxt(voltages[2]);
    tcmp_values[logical_index] = convert_tcmp(voltages[3]);
    cop_values[logical_index] = convert_cop(voltages[4]);

    /* DEBUGGING */
    // print out the last DEBUG_PRINT stored values
    // this chunk of code results in many VALGRIND errors !!!!
    int32_t i, j;
    for (i = DEBUG_PRINT-1; i >= 0; i--)
    {
        /* To compensate for storage rollover */
        j = (logical_index-i < 0)? logical_index-i+60: logical_index-i;

        printf("\nPFP %d: %d\n", j+1, pfp_values[j]);
        printf("PTLT %d: %d\n", j+1, ptlt_values[j]);
        printf("PTRT %d: %d\n", j+1, ptrt_values[j]);
        printf("TCMP %d: %d\n", j+1, tcmp_values[j]);
        printf("COP %d: %d\n", j+1, cop_values[j]);
    }

    return(0);
}

int32_t convert_pfp (int32_t voltage)
{
    int32_t pressure;

    /* This algorithm is only for testing. Actual algorithm will replace it. */
    pressure = voltage / 20;

    return (pressure);
}

int32_t convert_ptxt (int32_t voltage)
{
    int32_t temp;

    /* This algorithm is only for testing. Actual algorithm will replace it. */
    temp = voltage / 20;

    return (temp);
}

int32_t convert_tcmp (int32_t voltage)
{
    int32_t temp;

    /* This algorithm is only for testing. Actual algorithm will replace it. */
    temp = voltage / 200;

    return (temp);
}

int32_t convert_cop (int32_t voltage)
{
    int32_t pressure;

    /* This algorithm is only for testing. Actual algorithm will replace it. */
    pressure = voltage / 500 - 5;

    return (pressure);
}

int32_t get_timestamps(void)
{
    int64_t timestamps[9] = {0,0,0,0,0,0,0,0,0};

    // READ IN TIMESTAMPS
    fpga_sim_timestamps(&timestamps[0]);

    // ADD IN REAL TIME OFFSET VALUE
    int32_t i;
    for (i = 0; i < 9 && timestamps[i] != 0; i++)
    {
        timestamps[i] = timestamps[i] + offset;
    }

    // STORE TIMESTAMPS SEPARATELY AS SECONDS AND NANOSECONDS
    split_timestamps(&timestamps[0]);

    return(0);
}

void split_timestamps(int64_t *timestamps)
{
    int32_t dif;
    struct timespec real_time;
    
    int32_t i;
    for(i = 0; i < 9; i++)
    {
        /* To compensate for storage rollover */
        timestamp_index = (MAX_TS_PERIOD-1 <= timestamp_index)? 0: timestamp_index+1;

        cam_secs[ timestamp_index ] = timestamps[i] / 100000000L;
        cam_nsecs[ timestamp_index ] = (timestamps[i] - cam_secs[ timestamp_index ] * 100000000L) * 10;
        // printf("Nano Stamps: %d\n", cam_nsecs[tot_stamps[1] + i]);
    }

    /* DEBUGGING */
    // print out all stored values
    int32_t j;
    for (i = DEBUG_PRINT-1; i >= 0; i--)
    {
        /* To compensate for storage rollover */
        j = timestamp_index-i + ((timestamp_index-i < 0)? MAX_TS_PERIOD: 0);

        printf("Second Stamp %d: %d\n", j+1, cam_secs[j]);
    }

    for (i = DEBUG_PRINT-1; i >= 0; i--)
    {
        /* To compensate for storage rollover */
        j = timestamp_index-i + ((timestamp_index-i < 0)? MAX_TS_PERIOD: 0);

        printf("Nano Stamp %d:   %d\n", j+1, cam_nsecs[j]);
    }

    /* DEBUGGING */
    printf("Logical Index: %d\nTimestamp Index: %d\n", logical_index, timestamp_index);

    // CHECK IF TIMESTAMP OFFSET ADJUSTMENT IS WORKING PROPERLY
    clock_gettime(CLOCK_REALTIME, &real_time);
    dif = real_time.tv_sec - cam_secs[timestamp_index-8];

    if( abs(dif) > CLOCK_OFFSET_TOLERANCE )
    {
        printf("\nERROR: Corrected timestamps are more than %d seconds different from the realtime clock!\n", \
            CLOCK_OFFSET_TOLERANCE);
        syslog(LOG_ERR, "%s:%d ERROR: Corrected timestamps are more than %d seconds different from the realtime clock!", \
            __FUNCTION__, __LINE__, CLOCK_OFFSET_TOLERANCE);
    }
}
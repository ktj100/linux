#!/usr/bin/env python3

import sys
import socket
import subprocess
import proc
import time
import datetime
import random
import struct
import os
import multiprocessing

#TCP
TCP_IP                              = "127.0.0.1"   
TCP_PORT                            = 8000 

#UDP
UDP_IP                              = "127.0.0.1"
UDP_PORT                            = 4096

#COMMAND ID
CMD_REGISTER_APP                    = 1
CMD_REGISTER_APP_ACK                = 2
CMD_REGISTER_DATA                   = 3
CMD_REGISTER_DATA_ACK               = 4
CMD_SUBSCRIBE                       = 5
CMD_SUBSCRIBE_ACK                   = 6
CMD_HEARTBEAT                       = 7
CMD_OPEN                            = 8 
CMD_CLOSE                           = 9 
CMD_PUBLISH                         = 10
CMD_SYSINIT                         = 11

#USED TO TRIGGER A FAIL IN SIMM
INVALID_CMD                         = 90
ERROR_toFAIL                        = 91
NUM_BYTES                           = 92
TRIGGER_FAIL                        = 93

#MPs
MP_SOURCE_TIME_SEC                  = 1001
MP_SOURCE_TIME_NSEC                 = 1002
MP_PFP_VALUE                        = 1003
MP_PTLT_TEMPERATURE                 = 1004
MP_PTRT_TEMPERATURE                 = 1005
MP_TCMP                             = 1006
MP_COP_HO_REAL                      = 1007
MP_COP_HO_IMAG                      = 1008
MP_COP_FO_REAL                      = 1009
MP_COP_FO_IMAG                      = 1010
MP_CRANK_HO_REAL                    = 1011
MP_CRANK_HO_IMAG                    = 1012
MP_CRANK_FO_REAL                    = 1013
MP_CRANK_FO_IMAG                    = 1014
MP_TURBO_REAL                       = 1015
MP_TURBO_IMAG                       = 1016
MP_COP_HALFORDER_AMPLITUDE          = 1017
MP_COP_HALFORDER_ENERGY             = 1018
MP_COP_HALFORDER_PHASE              = 1019
MP_COP_FIRSTORDER_AMPLITUDE         = 1020
MP_COP_FIRSTORDER_ENERGY            = 1021
MP_COP_FIRSTORDER_PHASE             = 1022
MP_CRANK_HALFORDER_AMPLITUDE        = 1023
MP_CRANK_HALFORDER_ENERGY           = 1024
MP_CRANK_HALFORDER_PHASE            = 1025
MP_CRANK_FIRSTORDER_AMPLITUDE       = 1026
MP_CRANK_FIRSTORDER_ENERGY          = 1027
MP_CRANK_FIRSTORDER_PHASE           = 1028
MP_TURBO_OIL_FIRSTORDER_AMPLITUDE   = 1029
MP_TURBO_OIL_FIRSTORDER_ENERGY      = 1030
MP_CAM_SEC_1                        = 1031
MP_CAM_NSEC_1                       = 1032
MP_CAM_SEC_2                        = 1033
MP_CAM_NSEC_2                       = 1034
MP_CAM_SEC_3                        = 1035
MP_CAM_NSEC_3                       = 1036
MP_CAM_SEC_4                        = 1037
MP_CAM_NSEC_4                       = 1038
MP_CAM_SEC_5                        = 1039
MP_CAM_NSEC_5                       = 1040
MP_CAM_SEC_6                        = 1041
MP_CAM_NSEC_6                       = 1042
MP_CAM_SEC_7                        = 1043
MP_CAM_NSEC_7                       = 1044
MP_CAM_SEC_8                        = 1045
MP_CAM_NSEC_8                       = 1046
MP_CAM_SEC_9                        = 1047
MP_CAM_NSEC_9                       = 1048
MP_COP_PRESSURE                     = 1049

MP_PERIOD                           = 5000
MP_NUM_SAMPLES                      = 1000

INVALID_MP                          = 500
INVALID_MP_PERIOD                   = 500

#UNPACK STRING FORMATS (see enums from simm_functions.h)
REGISTER_APP_STR_FMT                = '=HHBII'
REGISTER_APP_ACK_STR_FMT            ='HHH'
#REGISTER_DATA_STR_FMT               = '=HHB'+10*'I' 
REGISTER_DATA_STR_FMT               = '=HHB'+26*'I'
#REGISTER_DATA_ACK_STR_FMT           = 10*'H'
REGISTER_DATA_ACK_STR_FMT           = 26*'H'
UDP_OPEN_MSG_FMT                    = '=HHH'
SYS_INIT_MSG_FMT                    = '=HH'
#SUBSCRIBE_STR_FMT                   = '=HHBIIIH'+21*'I'
SUBSCRIBE_STR_FMT                   = '=HHBIIIH'+69*'I'
PUBLISH_HDR_STR_FMT                 = '=HHIIH'
SUBSCRIBE_ACK_HDR_STR_FMT           = '=HHIH'


# DATA TO SEND
regAppAckData                      = [CMD_REGISTER_APP_ACK, 2, 0]
#regAppAckData                       = [INVALID_CMD, 2, 0]


#regDataAckErrors                    = [0, 0, 0, 0, 0, 0, 0, 0]
regDataAckErrors                    = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]   
regDataAckData                      = [CMD_REGISTER_DATA_ACK, len(regDataAckErrors)*2] + regDataAckErrors
#regDataAckData                      = [CMD_REGISTER_DATA_ACK, INVALID_CMD] + regDataAckErrors


sendSysInitMsg                      = [CMD_SYSINIT, 0]
#sendSysInitMsg                      = [CMD_SYSINIT, 0]


subscribeMPdata                     = [ MP_PFP_VALUE,            MP_PERIOD, MP_NUM_SAMPLES, 
                                        MP_PTLT_TEMPERATURE,     MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_PTRT_TEMPERATURE,     MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_TCMP,                 MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_COP_PRESSURE,         MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_SEC_1,            MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_NSEC_1,           MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_SEC_2,            MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_NSEC_2,           MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_SEC_3,            MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_NSEC_3,           MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_SEC_4,            MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_NSEC_4,           MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_SEC_5,            MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_NSEC_5,           MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_SEC_6,            MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_NSEC_6,           MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_SEC_7,            MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_NSEC_7,           MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_SEC_8,            MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_NSEC_8,           MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_SEC_9,            MP_PERIOD, MP_NUM_SAMPLES,
                                        MP_CAM_NSEC_9,           MP_PERIOD, MP_NUM_SAMPLES]
#subscribeMPdata                     = [ MP_PFP_VALUE,            MP_PERIOD, MP_NUM_SAMPLES,
#                                        MP_PTLT_TEMPERATURE,     MP_PERIOD, MP_NUM_SAMPLES,
#                                        MP_PTRT_TEMPERATURE,     MP_PERIOD, MP_NUM_SAMPLES,
#                                        MP_TCMP,                 MP_PERIOD, MP_NUM_SAMPLES,
#                                        MP_COP_PRESSURE,         MP_PERIOD, MP_NUM_SAMPLES,
#                                        MP_CAM_SEC_1,            MP_PERIOD, MP_NUM_SAMPLES,
#                                        MP_CAM_NSEC_1,           MP_PERIOD, MP_NUM_SAMPLES]
subscribeData                       = [CMD_SUBSCRIBE, 291, 0, 0, 0, 23, 0] + subscribeMPdata
#subscribeData                       = [CMD_SUBSCRIBE, 99, 0, 0, 0, 7, 0] + subscribeMPdata
#subscribeData                       = [CMD_SUBSCRIBE, 99, 0, 0, 0, 7, 0] + subscribeMPdata

def startSimm():
    # start/restart app here
    os.chdir("/home/norwood/sandbox/repos/trunk/SW/simm/")
    subprocess.Popen("./simm") #vs. call vs. ?


def TCPsetup():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print( 'TCP Socket created')
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    try:
        s.bind( (TCP_IP, TCP_PORT) )
    except msg:
        print( 'TCP Bind failed. Error code: ' + str(msg[0]) + 'Error message: ' + msg[1])
        conn.close()
        s.close()
        sys.exit()
    print('TCP Socket bind complete')
    s.listen(1)
    print('TCP Socket now listening')
    p = multiprocessing.Process(target=startSimm)
    p.start()
    (TCPconn, TCPaddr) = s.accept()
    return TCPconn


def UDPsetup():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    print( 'UDP Socket created')
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    return s


def registerApp(TCPconn):
    regAppData = TCPconn.recv(1024)
    retBytes = len(regAppData)
    print(struct.unpack(REGISTER_APP_STR_FMT , regAppData))
    print('REGISTER APP DONE!')


def registerAppAck(TCPconn, passfail):
    if 0 == passfail:
        print(regAppAckData)
        TCPconn.send(struct.pack(REGISTER_APP_ACK_STR_FMT, *regAppAckData))
        print('REGISTER APP ACK DONE!')
    else:
        print('REGISTER APP ACK FAIL!')


def registerData(TCPconn):
    regDataData = TCPconn.recv(1024)
    retBytes = len(regDataData)
    print(struct.unpack(REGISTER_DATA_STR_FMT , regDataData))
    print('REGISTER DATA DONE!')


def registerDataAck(TCPconn, passfail):
    if 0 == passfail:
        print(regDataAckData)
        TCPconn.send(struct.pack(REGISTER_DATA_ACK_STR_FMT, *regDataAckData))
        print('REGISTER DATA ACK DONE!')
    else:
        print('REGISTER DATA ACK FAIL!')


def udpOpen(UDPsock):
    try:
        UDPsock.bind( (UDP_IP, UDP_PORT) )
    except msg:
        print( 'UDP Bind failed. Error code: ' + str(msg[0]) + 'Error message: ' + msg[1])
        # conn.close()
        # UDPsock.close()
        sys.exit()
    print('UDP Socket bind complete')
    UDPopenMsg, SenderAddr = UDPsock.recvfrom(1024)
    print(SenderAddr)
    print(struct.unpack(UDP_OPEN_MSG_FMT , UDPopenMsg))
    print('UDP OPEN DONE!')
    return SenderAddr
    

def sysInit(UDPsock, SenderAddr, passfail):
    if passfail == 0:
        UDPsock.sendto((struct.pack(SYS_INIT_MSG_FMT, *sendSysInitMsg )), SenderAddr )
        print('SYS INIT DONE!')
    else:
        print('SYS INIT FAIL!') 


def subscribe(TCPconn, passfail):
    if 0 == passfail:
        print(subscribeData)
        TCPconn.send(struct.pack(SUBSCRIBE_STR_FMT, *subscribeData))
        print('SUBSCRIBE DONE!')
    else:
        print('SUBSCRIBE FAIL!')


def subscribeAck(TCPconn):
    subAckData = TCPconn.recv(1024)
    retBytes = len(subAckData)
    mpErr = int((retBytes - struct.calcsize(SUBSCRIBE_ACK_HDR_STR_FMT))/struct.calcsize('=H'))
    SUBSCRIBE_ACK_STR_FMT = SUBSCRIBE_ACK_HDR_STR_FMT+mpErr*'H'
    print(struct.unpack(SUBSCRIBE_ACK_STR_FMT , subAckData))
    print('SUBSCRIBE ACK DONE!')


def publish(UDPsock):
    pubMsg, SenderAddr = UDPsock.recvfrom(1024)
    retBytes = len(pubMsg)
    mpData = int((retBytes - struct.calcsize(PUBLISH_HDR_STR_FMT))/struct.calcsize('=I'))
    PUBLISH_STR_FMT = PUBLISH_HDR_STR_FMT+mpData*'I'
    print(struct.unpack(PUBLISH_STR_FMT, pubMsg))
    print(SenderAddr)
    print('PUBLISH DONE!')

/** @file simm_functions.h
 * Globals for most of the simm functionality  
 *
 * Copyright (c) 2015, DornerWorks, Ltd.
 */

/****************
* INCLUDES
****************/
#ifndef __SIMMFUNCTIONS_H__
#define __SIMMFUNCTIONS_H__
#include <time.h>
#include <sys/socket.h>

/****************
* GLOBALS
****************/
#define DAEMON_NAME             "SIMM"
#define UNUSED(x) (x)__attribute__((unused))
                                                // MILLSECONDS
#define MINPER                                  1000    // using this for now, while each MP must have the same PERIOD
#define MINPER_PFP_VALUE                        1000
#define MINPER_PTLT_TEMPERATURE                 1000
#define MINPER_PTRT_TEMPERATURE                 1000
#define MINPER_TCMP                             1000
#define MINPER_CAM_SEC_1                        1000
#define MINPER_CAM_NSEC_1                       1000
#define MINPER_CAM_SEC_2                        1000
#define MINPER_CAM_NSEC_2                       1000
#define MINPER_CAM_SEC_3                        1000
#define MINPER_CAM_NSEC_3                       1000
#define MINPER_CAM_SEC_4                        1000
#define MINPER_CAM_NSEC_4                       1000
#define MINPER_CAM_SEC_5                        1000
#define MINPER_CAM_NSEC_5                       1000
#define MINPER_CAM_SEC_6                        1000
#define MINPER_CAM_NSEC_6                       1000
#define MINPER_CAM_SEC_7                        1000
#define MINPER_CAM_NSEC_7                       1000
#define MINPER_CAM_SEC_8                        1000
#define MINPER_CAM_NSEC_8                       1000
#define MINPER_CAM_SEC_9                        1000
#define MINPER_CAM_NSEC_9                       1000
#define MINPER_TS                               1000
#define MINPER_SIMM                             1000
#define MINPER_COP_PRESSURE                     1000
 
#define MAX_SIMM_SUBSCRIPTION                   33   
#define MAX_TIMESTAMPS                          9  
#define PI                                      3.1415926535897932384626433832795
//SUBSCRIBE MP INFO
typedef struct
{
    uint32_t mp;
    float *mp_val_float;        // logicals     60
    uint32_t *mp_val_long;      // timestamps   60
    int32_t period;
    uint32_t numSamples;
    bool logical;
    bool valid;
} MPinfo;

//SUBSCRIBE TOPIC INFO
typedef struct
{
    uint32_t topic_id;
    uint32_t app_name;
    uint32_t period;
    uint32_t numMPs;
    MPinfo *topicSubscription;
    bool publishReady;
} topicToPublish;

extern topicToPublish *publishMe;

extern uint32_t voltages[5];
extern uint32_t timestamps[9];
extern uint32_t ts_HiLoCnt[3];

extern uint32_t voltages_toGet[5];
extern uint32_t timestamps_toGet[9];
extern uint32_t ts_HiLoCnt_toGet[3];

extern uint32_t *pfp_values;
extern uint32_t *ptlt_values;
extern uint32_t *ptrt_values;
extern uint32_t *tcmp_values;
extern uint32_t *cop_values;
extern uint32_t *cam_secs;
extern uint32_t *cam_nsecs;

extern uint32_t *cam_secs_chk;
extern uint32_t *cam_nsecs_chk;
extern int32_t num_mps; 
extern int32_t MPnum;
extern int32_t *sub_mp;
extern int32_t *sub_mpPer;
extern uint32_t *sub_mpNumSamples;
extern int32_t subAppName;
extern int32_t simmAppName;

extern int32_t num_topics_total;
extern uint32_t num_topics_atCurrentRate;
extern uint32_t currentTopic;
extern int32_t maxPublishPeriod; 
extern int32_t prevPeriodChk;
extern int32_t nextPublishPeriod;

extern float *hannWindowCo;

/****************
* PRIVATE DATA TYPES
****************/
// API COMMANDS
enum WhichMsg 
{
    CMD_REGISTER_APP                    = 0x0001,   // send
    CMD_REGISTER_APP_ACK                = 0x0002,   // rcv  
    CMD_REGISTER_DATA                   = 0x0003,   // send
    CMD_REGISTER_DATA_ACK               = 0x0004,   // rcv
    CMD_SUBSCRIBE                       = 0x0005,   // rcv
    CMD_SUBSCRIBE_ACK                   = 0x0006,   // send
    CMD_HEARTBEAT                       = 0x0007,                                           //
    CMD_OPEN                            = 0x0008,   // UDP send
    CMD_CLOSE                           = 0x0009,   // UDP send
    CMD_PUBLISH                         = 0x000A,   // send
    CMD_SYSINIT                         = 0x000B,   // send
};

// MPs
enum listMP
{
    MP_SOURCE_TIME_SEC                  = 1001, //    Time_t  This is the time calculated at the source. Seconds part of the clock_gettime API. This MP will be added to all publish messages by the source.
    MP_SOURCE_TIME_NSEC                 = 1002, //    long    This is the time calculated at the source. Nano seconds field of clock_gettime API. 1001 and 1002 should be the fields of the same clock_gettime API call. This MP will be added to all publish messages by the source.
    MP_PFP_VALUE                        = 1003, //    *float   Pre-filter  Fuel pressure sensor
    MP_PTLT_TEMPERATURE                 = 1004, //    *float   Exhaust manifold - pre-turbine temperature left
    MP_PTRT_TEMPERATURE                 = 1005, //    *float   Exhaust manifold - pre-turbine temperature right
    MP_TCMP                             = 1006, //    *Float   TCMP temperature
    MP_COP_HO_REAL                      = 1007, //    *float   COP half order real value
    MP_COP_HO_IMAG                      = 1008, //    *float   COP half order imaginary  value
    MP_COP_FO_REAL                      = 1009, //    *Float   COP full order real value
    MP_COP_FO_IMAG                      = 1010, //    *float   COP full order imaginary  value
    MP_CRANK_HO_REAL                    = 1011, //    *Float   CRANK half order real value
    MP_CRANK_HO_IMAG                    = 1012, //    *Float   CRANK half order imaginary  value
    MP_CRANK_FO_REAL                    = 1013, //    *Float   CRANK full order real value
    MP_CRANK_FO_IMAG                    = 1014, //    *float   CRANK full order imaginary  value
    MP_TURBO_REAL                       = 1015, //    *float   MPTurbo oil let sensor – real part
    MP_TURBO_IMAG                       = 1016, //    *Float   MPTurbo oil let sensor – imaginary  part
    MP_COP_HALFORDER_AMPLITUDE          = 1017, //    float   Following MP’s originate from FDL app
    MP_COP_HALFORDER_ENERGY             = 1018, //    float
    MP_COP_HALFORDER_PHASE              = 1019, //    Float
    MP_COP_FIRSTORDER_AMPLITUDE         = 1020, //    Float
    MP_COP_FIRSTORDER_ENERGY            = 1021, //    Float
    MP_COP_FIRSTORDER_PHASE             = 1022, //    Float
    MP_CRANK_HALFORDER_AMPLITUDE        = 1023, //    Float
    MP_CRANK_HALFORDER_ENERGY           = 1024, //    float
    MP_CRANK_HALFORDER_PHASE            = 1025, //    Float
    MP_CRANK_FIRSTORDER_AMPLITUDE       = 1026, //    Float
    MP_CRANK_FIRSTORDER_ENERGY          = 1027, //    Float
    MP_CRANK_FIRSTORDER_PHASE           = 1028, //    float
    MP_TURBO_OIL_FIRSTORDER_AMPLITUDE   = 1029, //    Float
    MP_TURBO_OIL_FIRSTORDER_ENERGY      = 1030, //    float
    MP_CAM_SEC_1                        = 1031, //    *long    This is the time calculated at the zero crossing for the CAM sensor. Seconds part of the clock_gettime API
    MP_CAM_NSEC_1                       = 1032, //    *long    This is the time calculated at the zero crossing for the CAM sensor. Nano- Seconds part of the clock_gettime API
    MP_CAM_SEC_2                        = 1033,
    MP_CAM_NSEC_2                       = 1034,
    MP_CAM_SEC_3                        = 1035,
    MP_CAM_NSEC_3                       = 1036,
    MP_CAM_SEC_4                        = 1037,
    MP_CAM_NSEC_4                       = 1038,
    MP_CAM_SEC_5                        = 1039,
    MP_CAM_NSEC_5                       = 1040,
    MP_CAM_SEC_6                        = 1041,
    MP_CAM_NSEC_6                       = 1042,
    MP_CAM_SEC_7                        = 1043,
    MP_CAM_NSEC_7                       = 1044,
    MP_CAM_SEC_8                        = 1045,
    MP_CAM_NSEC_8                       = 1046,
    MP_CAM_SEC_9                        = 1047,
    MP_CAM_NSEC_9                       = 1048,
    MP_COP_PRESSURE                     = 1049, //    *long    COP Pressure
};

// ERROR CODES
enum errorCodes
{
    GE_SUCCESS                          = 0,
    GE_REGN_TIMEOUT,
    GE_PACKET_ERR,
    GE_INVALID_COMMAND_ID,
    GE_INVALID_HOST_OS,
    GE_INVALID_PROCESS_ID,
    GE_INVALID_PROCESS_NAME,
    GE_INVALID_NO_OF_MPS,
    GE_INVALID_MP_NUMBER,
    GE_STALE_DATA,
    GE_DATA_NOT_AVAIL,
    GE_BARSM_TO_AACM_ERR,
    GE_AACM_TO_BARSM_ERR, 
};

// Host OSs
enum hostOS
{
    PETALINUX                           = 0,
    // others ... ?
};

// Host OSs
enum topicIDs
{
    APP_FDL_ID                          = 1000,
    // others ... ?
};


/****************
* PRIVATE FUNCTION PROTOTYPES
****************/
int32_t getVarPeriod(void);
void remote_set16(uint8_t *ptr, uint16_t val);
void remote_set32(uint8_t *ptr, uint32_t val);
void remote_set64(uint8_t *ptr, uint64_t val);
uint16_t remote_get16(uint8_t *ptr);
uint32_t remote_get32(uint8_t *ptr); 

// at boot API processing
bool process_registerApp( int32_t csocket , struct timespec goTime );
bool process_registerApp_ack(int32_t csocket );
bool process_registerData(int32_t csocket);
bool process_registerData_ack(int32_t csocket );
bool process_openUDP( int32_t csocket , struct sockaddr_in addr_in );
bool process_sysInit( int32_t csocket );

// run-time API processing
void process_publish( int32_t csocket , struct sockaddr_in addr_in , int32_t topic_to_pub );
bool process_subscribe( int32_t csocket );
bool process_subscribe_ack( int32_t csocket );
bool process_HeartBeat( int32_t csocket, int32_t HeartBeat );
bool numSecondsHaveElapsed( struct timespec startTime , struct timespec stopTime , int32_t numSeconds );
bool buildPublishData(void);
int32_t publishManager(void);

#endif

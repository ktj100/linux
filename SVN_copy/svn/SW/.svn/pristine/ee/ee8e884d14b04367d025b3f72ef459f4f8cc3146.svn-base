#!/usr/bin/env python3

# This script ensures that BARSM restarts any successed applications that started 
# up good. Error logs are also checked

import sys
import os.path
sys.path.append(os.path.join(os.path.dirname(__file__), '../utils'))

import log
import barsm_utils

import time
import datetime
import proc

def run():
    success = True
    zombies = 0
    #Should be 5
    expectedZombies = 5
    # navigate to the end of the SYSLOG
    follow = log.logfollower()
    follow2 = log.logfollower()

    # clear out all app directories
    barsm_utils.remove()

    # compile needed applications and place in required directories
    # barsm_utils.short_launch()  # testing...
    barsm_utils.launch_bad()
    #barsm_utils.norm_launch()

    # start barsm
    barsm_utils.start_barsm()

    # setup AACM side of BARSM/AACM communications
    if success:
        success = barsm_utils.aacm_setup()

    if success:
        # launch processes
        launch_result, launch_finish_ts = barsm_utils.monitor_launch(log=follow, resetApps=5)
        if launch_result != 9 or None == launch_finish_ts:
            print("Launch Failure")
            print("Launch Result: {} != 9".format(launch_result))
            print("Launch Finish TS: {}".format(launch_finish_ts))
            success = False

        # get the time of the launch finish
        #logs = follow.read('barsm')
        # print(logs)
        #launch_finish_ts = list(filter(lambda t: "COMPLETED: Launch sequence complete!" in t['message'], logs))[0]['timestamp']

    if success:
        print("Launch completed at {}".format(launch_finish_ts))

        # wait for 35 seconds to pass to check for 5 zombies
        print("Waiting 35 seconds after launch for children to become zombies...")
        delay = 35.0 - (datetime.datetime.now() - launch_finish_ts).total_seconds()
        if delay > 0:
            time.sleep(delay)

        # make sure all 5 thirty second apps ended and none others
        #print(proc.infolist())
        #print(proc.findproc("valgrind.bin"))
        barsm_pid = (proc.findproc("valgrind.bin"))[0]['pid']
        child_pids = proc.findchild(barsm_pid)
        #print(child_pids)
        zombies = sum(1 for c in child_pids if "Z" == c.get('state'))
        print('Zombies: {}'.format(zombies))

        if expectedZombies != zombies:
            print("Zombie Creation Failure")
            success = False

        # wait for 65 seconds to pass to check for child recreation
        print("Waiting 65 seconds after launch for children to be replaced...")
        delay = 65.0 - (datetime.datetime.now() - launch_finish_ts).total_seconds()
        if delay > 0:
            time.sleep(delay)

        # make sure all 5 stopped processes have logged errors to go with
        # get the time of the launch finish
        logs = follow2.read('barsm')
        #print (logs)
        if list(filter(lambda t: "ERROR: Process for /opt/rc360/system/thirty_aacm" in t['message'], logs)) == []:
            print("SYSLOG error missing thirty_aacm")
            success = False
        if list(filter(lambda t: "ERROR: Process for /opt/rc360/modules/GE/thirty_gemod" in t['message'], logs)) == [] :
            print("SYSLOG error missing thirty_gemod")
            success = False
        if list(filter(lambda t: "ERROR: Process for /opt/rc360/modules/TPA/thirty_tpamod" in t['message'], logs)) == [] :
            print("SYSLOG error missing thirty_tpamod")
            success = False
        if list(filter(lambda t: "ERROR: Process for /opt/rc360/apps/GE/thirty_geapp" in t['message'], logs)) == [] :
            print("SYSLOG error missing thirty_geapp")
            success = False
        if list(filter(lambda t: "ERROR: Process for /opt/rc360/apps/TPA/thirty_tpaapp" in t['message'], logs)) == [] :
            print("SYSLOG error missing thirty_tpaapp")
            success = False

        # make sure all apps get started back up
        child_pids = proc.findchild(barsm_pid)
        #print(child_pids)
        zombies = sum(1 for c in child_pids if "Z" == c.get('state'))
        #print(zombies)

    # kill off all started processes
    barsm_utils.kill_procs()

    if expectedZombies == zombies and success:
        print('Test Passes')
        return True
    else:
        print('Test Failed')
        return False

if __name__ == '__main__':
    run()

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <errno.h>
#include <syslog.h>
#include <string.h>
#include <time.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdint.h>

#include "sensor.h"
#include "fpga_read.h"

/* This file will replace fpga_sim.c as the actual file that will be 
 * used to read from the FPGA. Three functions are required to be 
 * implemented in order to replace: one to wait for the FPGA to activate
 * the interrupt register, one to obtain the raw value for the logical
 * 1 Hz values, and one to obtain the timestamps. */

int32_t dev = 0;
uint32_t *fpga_regs;

void setup_registers(void)
{
    dev = open("simulation_file.bin", O_RDWR);
    fpga_regs = (uint32_t*) mmap(0, 512, PROT_READ | PROT_WRITE, MAP_SHARED, dev ,0);
    printf("fpga_regs = %p\n", fpga_regs);
}

int32_t wait_for_fpga(void)
{
    int32_t delay_finished;

    // RESET BIT TO '1' WHEN IT BECOMES A '0'
    delay_finished = fpga_regs[IAR];
    // printf("delay_finished = %d\n", delay_finished);
    // sleep(1);
    if (0 == delay_finished)
    {
        // printf("Address 15: %p\n", &fpga_regs[IAR]);
        // printf("Contents of 15: %u\n", fpga_regs[IAR]);
        fpga_regs[IAR] = 1;
        return(1);
    }
    else
    {
        return(0);
    }
}

void fpga_sim_voltages(int *voltage)
{
    voltage[0] = fpga_regs[PFP_VAL];
    voltage[1] = fpga_regs[PTLT_VAL];
    voltage[2] = fpga_regs[PTRT_VAL];
    voltage[3] = fpga_regs[TCMP_VAL];
    voltage[4] = fpga_regs[COP_VAL];
}

void fpga_sim_timestamps(int64_t *timestamps)
{
    int32_t num_ts, i;
    int64_t high, low;

    timestamps[0] = fpga_regs[CAM_TS_VAL_0];
    timestamps[1] = fpga_regs[CAM_TS_VAL_1];
    timestamps[2] = fpga_regs[CAM_TS_VAL_2];
    timestamps[3] = fpga_regs[CAM_TS_VAL_3];
    timestamps[4] = fpga_regs[CAM_TS_VAL_4];
    timestamps[5] = fpga_regs[CAM_TS_VAL_5];
    timestamps[6] = fpga_regs[CAM_TS_VAL_6];
    timestamps[7] = fpga_regs[CAM_TS_VAL_7];
    timestamps[8] = fpga_regs[CAM_TS_VAL_8];

    high = fpga_regs[TS_HIGH];
    low = fpga_regs[TS_LOW];

    num_ts = fpga_regs[TS_COUNT];
    printf("Timestamps: %d\n", num_ts);
    for (i = 0; i < 9; i++)
    {
        if (i >= num_ts)
            timestamps[i] = 0;
        else if (timestamps[i] > low)
            timestamps[i] += (high - 1) << 32;
        else
            timestamps[i] += high << 32;
    }
}
#!/usr/bin/env python3

import sys
sys.path.insert(0, '/home/norwood/sandbox/repos/trunk/SW/test/utils')
import fdl
import log
import subprocess
import time
import threading

# This is structured pretty much the same way as MyServer.c
if __name__ == '__main__':
    RunTimetoTest   = 180
    fdlTestResult   = True

    # commented values can be used as PASS values.  Set to 0 for full test.  
    regAppAck_passfail  = 0     # 3
    regDataAck_passfail = 0    # 26
    sysInit_passfail    = 0     # 2
    subscribe_passfail  = 0    # 76

    sysLogFollow = log.logfollower()
    lock = threading.Lock()

    cntPassFail = 0
    #BOOT PROCESSES
    while fdlTestResult != False:   
        subprocess.Popen("clear")
        time.sleep(1)
        print("TEST STARTED!")
        print("PassFail Attempts: ", cntPassFail)
        sysLogFollow.start()
        #if False == KeepMoving
        #   close TCP and UDP connections?  so far, it's working without doing so ...

        KeepMoving = True
        if KeepMoving != False:
            # TCP SETUP
            TCPconn, sVal, fdlProc = fdl.TCPsetup()
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                print("TCP SETUP errors: ", launch_errors)
                KeepMoving = False
            
        if KeepMoving != False:
            #UDP SETUP
            UDPsock = fdl.UDPsetup()
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                print("UDP SETUP errors: ", launch_errors)
                KeepMoving = False

        if KeepMoving != False:
            # REGISTER APP
            #time.sleep(1)
            fdl.registerApp(TCPconn, sVal)
            print("REGISTER APP: FINISHED RECEIVING")
            #time.sleep(1)
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                sVal.close()
                print("REGISTER APP errors: ", launch_errors)
                KeepMoving = False

        if KeepMoving != False:
            # REGISTER APP ACK
            print("REGISTER APP ACK ATTEMPT: ", regAppAck_passfail)
            fdl.registerAppAck(TCPconn, regAppAck_passfail)
            time.sleep(1)
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                sVal.close()
                print("REGISTER APP ACK errors: ", launch_errors)
                KeepMoving = False
                regAppAck_passfail = regAppAck_passfail + 1
                #time.sleep(1)

        if KeepMoving != False:
        # REGISTER DATA
            fdl.registerData(TCPconn)
            print("READY TO GET REGISTER DATA")
            #time.sleep(1)
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                sVal.close()
                print("REGISTER DATA errors: ", launch_errors)
                KeepMoving = False

        if KeepMoving != False:
        # REGISTER DATA ACK
            print("REGISTER DATA ACK ATTEMPT: ", regDataAck_passfail)
            fdl.registerDataAck(TCPconn, regDataAck_passfail)
            time.sleep(1)
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                sVal.close()
                print("REGISTER DATA ACK errors:",launch_errors)
                KeepMoving = False
                regDataAck_passfail = regDataAck_passfail + 1
                #time.sleep(1)

        if KeepMoving != False:
        # UDP OPEN 
        # If I don't put a large delay in my .c, this fails.  If the .c stuff executes before this starts, it fails.  
            #print("UDP OPEN")
            SenderAddr = fdl.udpOpen(UDPsock)
            time.sleep(1)
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                sVal.close()
                print("UDP OPEN errors: ", launch_errors)
                KeepMoving = False

        if KeepMoving != False:
        # SYS INIT
            print("SYS INIT ATTEMPT: ", sysInit_passfail)
            fdl.sysInit(UDPsock, SenderAddr, sysInit_passfail)
            time.sleep(1)
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                sVal.close()
                print("SYS INIT errors: ", launch_errors)
                KeepMoving = False
                sysInit_passfail = sysInit_passfail + 1

        if KeepMoving != False:
        # GET SUBSCRIBE
            print("GET SUBSCRIBE ATTEMPT")
            fdl.getSubscribe(TCPconn)
            time.sleep(1)
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                print("SYS INIT errors: ", launch_errors)
                KeepMoving = False
                sysInit_passfail = sysInit_passfail + 1

        if KeepMoving != False:
        # SEND SUBSCRIBE ACK
            print("SEND SUB ACK ATTEMPT")
            fdl.sendSubscribeAck(TCPconn)
            time.sleep(1)
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                print("SEND SUB ACK errors:",launch_errors)
                KeepMoving = False
                regDataAck_passfail = regDataAck_passfail + 1

        if KeepMoving != False:
        # SEND PUBLISH DATA
            print("SEND PUBLISH DATA")
            fdl.sendPublish(UDPsock, SenderAddr)
            time.sleep(1)
            sysLog = sysLogFollow.read()
            sysLogFollow.start()
            launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
            if 0 < launch_errors:
                print("SEND PUBLISH DATA errors: ", launch_errors)
                KeepMoving = False
                sysInit_passfail = sysInit_passfail + 1
        cntPassFail = cntPassFail + 1
        #RUN-TIME PROCESSING
        if KeepMoving != False:
            print("Total tests peformed: ", cntPassFail)
            fdl.sendSubscribe(TCPconn)
            time.sleep(1)
            fdl.subscribeAck(TCPconn, 0)
            time.sleep(1)
            startTime = time.time()
            t = threading.Thread(group=None, target=fdl.getPublishThread, name=None, args=(UDPsock,lock,)).daemon = True
            t = threading.Thread(group=None, target=fdl.sendPublishThread, name=None, args=(UDPsock, SenderAddr)).daemon = True
            t = threading.Thread(group=None, target=fdl.HeartBeatThread, name=None, args=(TCPconn, lock)).daemon = True
            t = threading.Thread(group=None, target=fdl.getPublishThread, name=None, args=(UDPsock,lock,)).start()
            t = threading.Thread(group=None, target=fdl.sendPublishThread, name=None, args=(UDPsock, SenderAddr)).start()
            t = threading.Thread(group=None, target=fdl.HeartBeatThread, name=None, args=(TCPconn, lock)).start()
            alwaysRun = True
            while True == alwaysRun:
                endTime = time.time() - startTime
                sysLogFollow.start()
                sysLog = sysLogFollow.read()
                if 0 < launch_errors: 
                    print("RUN-TIME errors: ", launch_errors)
                    alwaysRun = False
                    fdlProc.terminate()
                    sys.exit()
                if endTime >= RunTimetoTest:
                    print("3 minutes elapsed with no errors detected.  End of test.")
                    print(cntPassFail, "/21 tests passed")
                    alwaysRun = False
                    fdlProc.terminate()
                    sys.exit()
                


#       if KeepMoving != False:
#       # SUBSCRIBE
#           print("SUBSCRIBE ATTEMPT: ", subscribe_passfail)
#           # cosnider sending some random parameters as well ...
#           if 2 == subscribe_passfail:
#               fdl.subscribe(TCPconn, 0)
#           elif 3 == subscribe_passfail:
#               fdl.subscribe(TCPconn, 0)
#           elif 4 == subscribe_passfail:
#               fdl.subscribe(TCPconn, 0)
#           elif 6 == subscribe_passfail:
#               fdl.subscribe(TCPconn, 0)
#           else:
#               fdl.subscribe(TCPconn, subscribe_passfail)
#           #time.sleep(1)
#           #sysLog = sysLogFollow.read()
#           #launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
#           #if 0 < launch_errors:
#               #print("SUBSCRIBE errors: ", launch_errors)
#               #KeepMoving = False
#
#       #if KeepMoving != False:
#       # SUBSCRIBE ACK
#           #sysLogFollow.start
#           fdl.subscribeAck(TCPconn, subscribe_passfail)
#           sysLog = sysLogFollow.read()
#           sysLogFollow.start
#           launch_errors = sum(1 for d in sysLog if "ERROR!" in d.get('message'))
#           #launch_success = sum(1 for d in sysLog if "fdl_init() SUCCESS!" in d.get('message'))
#           if 0 < launch_errors:
#               print("SUBSCRIBE ACK errors: ", launch_errors)
#               #KeepMoving = False
#               subscribe_passfail = subscribe_passfail + 1
#
#
#       # RUN-TIME PROCESSING
#       if KeepMoving != False:
#       # RUN-TIME
#           #cnt = 0
#           t = threading.Thread(group=None, target=fdl.sendPublishThread, name=None, args=(UDPsock, SenderAddr)).start()
#           t = threading.Thread(group=None, target=fdl.HeartBeatThread, name=None, args=(TCPconn, lock)).start()
#           time.sleep(7)
#           fdl.subscribe(TCPconn, 100)
#           time.sleep(1)
#           fdl.subscribeAck(TCPconn, 100)
#           time.sleep(7)
#           fdl.subscribe(TCPconn, 200)
#           time.sleep(1)
#           fdl.subscribeAck(TCPconn, 200)
#           alwaysRun = True
#           while True == alwaysRun:
#               alwaysRun = True

#include <stdbool.h>
#include <stdint.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <string.h>
#include <syslog.h>
#include <errno.h>
#include <poll.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <stdio.h>

#include "barsm_functions.h"

extern child_pid_list *first_node;

struct sockaddr_in DestAddr_TCP;
struct sockaddr_in DestAddr_UDP;

struct sockaddr_storage toRcvUDP;
struct ip_mreq mreq;
struct in_addr localInterface;


/**
 * Establish TCP socket.  
 *
 * @param[in] csocket: socket for the TCP communications
 *
 * @return true/false status of socket setup.  
 */
bool TCPsetup(int32_t *csocket) 
{
    bool success            = true;
    char ServerIPAddress[]  = "127.0.0.1";
    int32_t TCPServerPort       =  8000;
    int32_t reuse           = 1;
    int32_t chkSetSockOpt   = 0;

    printf("EXECUTING: Creating TCP socket \n");
    errno = 0;
    *csocket = socket(AF_INET, SOCK_STREAM, 0);
    // printf("'socket' call return: %d \n", *csocket);
    if (0 > *csocket)
    {
        success = false;
        syslog(LOG_ERR, "%s:%d ERROR! Failed to create socket %d (%d:%s) ", \
            __FUNCTION__, __LINE__, *csocket, errno, strerror(errno));
    }
    else
    {
        printf("SUCCESS: Socket created \n");
    }

    printf("EXECUTING: Running 'setsockopt()' \n");
    errno = 0;
    chkSetSockOpt = setsockopt(*csocket, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse));
    if ( 0 > chkSetSockOpt )
    {
        success = false;
        syslog(LOG_ERR, "%s:%d ERROR! setsockopt for reusing address failed %d (%d:%s) ", \
            __FUNCTION__, __LINE__, *csocket, errno, strerror(errno));
    }
    else
    {
        printf("SUCCESS: 'setsockopt()' completed normally \n");
    }

    errno = 0;
    if ( success )
    {
        printf("EXECUTING: Setting up TCP connection settings \n");
        memset(&DestAddr_TCP,0,sizeof(DestAddr_TCP));                   // clear struct
        DestAddr_TCP.sin_family = AF_INET;                          // must be this
        DestAddr_TCP.sin_port = htons(TCPServerPort);               // set the port to write to
        DestAddr_TCP.sin_addr.s_addr = inet_addr(ServerIPAddress);  // set destination IP address
        memset(&(DestAddr_TCP.sin_zero), '\0', 8);                  // zero the rest of the struct

        if (0 != connect(*csocket,(struct sockaddr *)&DestAddr_TCP, sizeof(DestAddr_TCP)))
        {
            success = false;
            syslog(LOG_ERR, "%s:%d ERROR! TCP failed to connect %u (%d:%s) ", \
                __FUNCTION__, __LINE__, DestAddr_TCP.sin_port, errno, strerror(errno));
        }
        else
        {
            printf("SUCCESS: TCP connection to AACM successful \n");
        }
    }

    return success;
}



/**
 * Establish UDP socket.  
 *
 * @param[in] csocket: socket for the UDP communications
 *
 * @return true/false status of socket setup.  
 */
bool UDPsetup(int32_t *csocket)
{
    bool success        = true;
    char UDPAddress[] = "225.0.0.37";
    int32_t UDPPort =  4096;
#if 0    
    int  loopch;
    uint8_t ttl;
#endif

    // multicast - still 100% on how this struct, setsockopt,  and IP_ADD_MEMBERSHIP tie together.  
    //struct ip_mreq mreq;
    if (true == success)
    {
        printf("EXECUTING: Creating UDP socket \n");
        errno = 0;
        *csocket = socket(AF_INET, SOCK_DGRAM, 0);
        // syslog(LOG_DEBUG, "Client Socket: %d ", *csocket);
        if (0 > *csocket)
        {
            //printf("ERROR WITH UDP SOCKET\n");
            success = false;
            syslog(LOG_ERR, "%s:%d ERROR: Failed to create UDP socket %d (%d:%s) - configure socket failed", \
                __FUNCTION__, __LINE__, *csocket, errno, strerror(errno));
        }
        else 
        {
            printf("SUCCESS: UDP socket created! \n");
        }
    }

    errno = 0;
    if (true == success)
    {
        printf("EXECUTING: Changing UDP Settings... \n");
        memset(&DestAddr_UDP,0,sizeof(DestAddr_UDP));               // clear struct
        DestAddr_UDP.sin_family = AF_INET;                          // must be this
        DestAddr_UDP.sin_port = htons(UDPPort);                     // set the port to write to
        DestAddr_UDP.sin_addr.s_addr = inet_addr(UDPAddress);       // set destination IP address
        memset(&(DestAddr_UDP.sin_zero), '\0', 8);                  // zero the rest of the struct
        printf("SUCCESS: UDP settings changed! \n");
    }

    // // transmit side
    // // set local interface for outbound muticast datagrams ...
    // printf("EXECUTING: Setting up transmit side of UDP... \n");
    // errno   = 0;
    // localInterface.s_addr = inet_addr("127.0.0.1");  // was originally INADDR_ANY, but also tried
    //                                                 // UDPAddress. INADDR_ANY causes a crash
    // // printf("%d\n", localInterface.s_addr);
    // errno = 0;
    // if (setsockopt(*csocket, IPPROTO_IP, IP_MULTICAST_IF, (uint8_t *)&localInterface, sizeof(localInterface)) < 0) 
    // {     // option 3 of setsockopt was IP_MULTICAST_IF, but it doesn't look like an option...
    //     syslog(LOG_ERR, "%s:%d ERROR: Failed to create/set local interface IP_MULTICAST_IF %d (%d:%s)", 
    //         __FUNCTION__, __LINE__, *csocket, errno, strerror(errno));
    //     success = false;
    // }
    // else
    // {
    //     printf("SUCCESS: Transmit side is set up! \n");
    // }

    // receive side ...
    // use setsockopt() to request that the kernel join a multicast group 
    printf("EXECUTING: Setting up receive side of UDP... \n");    
    errno = 0;
    mreq.imr_multiaddr.s_addr = inet_addr(UDPAddress);
    mreq.imr_interface.s_addr = htonl(INADDR_ANY);
    if (setsockopt(*csocket, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char *)&mreq, sizeof(mreq)) < 0)
    {
        success = false;
        syslog(LOG_ERR, "%s:%d ERROR: error with setsockopt multicast group IP_ADD_MEMBERSHIP %d (%d:%s)", \
            __FUNCTION__, __LINE__, *csocket, errno, strerror(errno));
    }
    else
    {
        printf("SUCCESS: Receive side is set up! \n");
    }

    return success;
}



/**
 * Used to initialize communications between BARSM and AACM immediately after 
 * startup of the AACM.
 *
 * @param[in] csocket: TCP socket
 *
 * @return true/false whether a terminal error has occured
 */
bool send_barsmToAacmInit(int32_t csocket)
{
    bool success = true;

    enum barsmToAacmInit_params
    {
        CMD_ID          = 2,
        LENGTH          = 2,
        MSG_SIZE        =   CMD_ID +
                            LENGTH,
    };

    uint8_t *ptr; 
    uint8_t *msgLenPtr = 0;
    uint16_t actualLength = 0; 
    uint16_t cmdId = CMD_BARSM_TO_AACM_INIT;
    uint8_t sendData[ MSG_SIZE ];
    ssize_t sentBytes;


    ptr = sendData;
    memcpy(ptr, &cmdId, CMD_ID);
    ptr += CMD_ID;

    msgLenPtr = ptr;
    ptr += LENGTH;

    actualLength = MSG_SIZE - CMD_ID - LENGTH;
    memcpy(msgLenPtr, &actualLength, sizeof(actualLength));

    printf("Socket File Descriptor: %d\n", csocket);

    printf("EXECUTING: Sending BARSM TO AACM INIT \n");
    errno = 0;
    sleep(3);
    sentBytes = send(csocket, sendData, MSG_SIZE, 0);
    if ( -1 == sentBytes )
    {
        syslog(LOG_ERR, "%s:%d ERROR: send() failed! (%d: %s)", \
            __FUNCTION__, __LINE__, errno, strerror(errno));
        success = false;
    }
    else if ( MSG_SIZE != sentBytes )
    {
        syslog(LOG_ERR, "%s:%d ERROR: send() return value (%zd) does not match MSG_SIZE!", \
            __FUNCTION__, __LINE__, sentBytes);
    }
    else
    {
        printf("SUCCESS: BARSM TO AACM INIT sent \n");
    }

    return (success);
}



/**
 * Used to receive the ackknoledgement message from the AACM.
 *
 * @param[in] csocket TCP socket
 *
 * @return true/false whether a terminal error has occured
 */
bool receive_barsmToAacmInitAck(int32_t csocket)
{
    bool success = true;

    enum barsmToAacmInitAck_params
    {
        CMD_ID          = 2,
        LENGTH          = 2,
        MSG_SIZE        =   CMD_ID +
                            LENGTH,
    };

    int32_t retBytes = 0;
    uint8_t retData[ MSG_SIZE ];
    uint8_t *ptr;
    uint32_t fullMsg = 0;

    struct pollfd myPoll[1];
    int32_t retPoll;

    myPoll[0].fd = csocket;
    myPoll[0].events = POLLIN; 

    printf("EXECUTING: Receiving BARSM TO AACM INIT ACK \n");
    errno = 0;
    retPoll = poll( myPoll, 1, -1 );
    if ( -1 == retPoll )
    {
        syslog(LOG_ERR, "%s:%d ERROR: poll() failure! (%d: %s)", \
            __FUNCTION__, __LINE__, errno, strerror(errno));
        success = false;
    }
    else if ( 0 == retPoll )
    {
        syslog(LOG_ERR, "%s:%d ERROR: poll() timeout!",__FUNCTION__, __LINE__);
        success = false;
    }
    else
    {
        if ( myPoll[0].revents && POLLIN )
        {
            errno = 0;
            retBytes = recv(csocket , retData , MSG_SIZE , 0 );
            ptr = &retData[0];

            memcpy(&fullMsg, ptr, sizeof(fullMsg));
            if ( -1 == retBytes )
            {
                syslog(LOG_ERR, "%s:%d ERROR: recv() failure! (%d: %s)", \
                    __FUNCTION__, __LINE__, errno, strerror(errno));
                success = false;
            }
            else if ( 4 != retBytes || fullMsg != BARSM_TO_AACM_INIT_ACK_MSG )
            {
                syslog(LOG_ERR, "%s:%d ERROR: Message received was not expected ACK!", \
                    __FUNCTION__, __LINE__);
                success = false;
                printf("Number of bytes in received ACK: %d \n", retBytes);
                printf("Full Message: %u \nExpected Message: %u \n", \
                    fullMsg, BARSM_TO_AACM_INIT_ACK_MSG);
            }
            else
            {
                printf("SUCCESS: BARSM TO AACM INIT ACK received \n");                
            }
        }
    }

    return (success);
}



/**
 * Used to assign a name to each process in the system.
 *
 * @param[in] pName: The 4 character string to store the name in
 *
 * @return void
 */
void assign_procName( char * pName )
{
    int32_t i;
    for ( i = 0; i < 4; i++ )
    {
        pName[i] = rand_letter();
    }
}



/**
 * Returns a random character from the alphabet.
 *
 * @param[in] void
 *
 * @return char: randomly selected letter of the alphabet
 */
char rand_letter(void)
{
    uint32_t randNum;
    char returnVal = NULL;

    randNum = rand() % 26;

    switch (randNum)
    {
        case 0:
        returnVal = 'a';
        break;
        case 1:
        returnVal = 'b';
        break;
        case 2:
        returnVal = 'c';
        break;
        case 3:
        returnVal = 'd';
        break;
        case 4:
        returnVal = 'e';
        break;
        case 5:
        returnVal = 'f';
        break;
        case 6:
        returnVal = 'g';
        break;
        case 7:
        returnVal = 'h';
        break;
        case 8:
        returnVal = 'i';
        break;
        case 9:
        returnVal = 'j';
        break;
        case 10:
        returnVal = 'k';
        break;
        case 11:
        returnVal = 'l';
        break;
        case 12:
        returnVal = 'm';
        break;
        case 13:
        returnVal = 'n';
        break;
        case 14:
        returnVal = 'o';
        break;
        case 15:
        returnVal = 'p';
        break;
        case 16:
        returnVal = 'q';
        break;
        case 17:
        returnVal = 'r';
        break;
        case 18:
        returnVal = 's';
        break;
        case 19:
        returnVal = 't';
        break;
        case 20:
        returnVal = 'u';
        break;
        case 21:
        returnVal = 'v';
        break;
        case 22:
        returnVal = 'w';
        break;
        case 23:
        returnVal = 'x';
        break;
        case 24:
        returnVal = 'y';
        break;
        case 25:
        returnVal = 'z';
        break;
    }

    return ( returnVal );
}



/**
 * Starts a new process in the linked list position that was send in the input
 * parameters. The new PID is copied in place and 'alive' status updated.
 *
 * @param[in] tmp_node: pointer position in the linked list wehre the new 
 *      process information needs to be stored
 *
 * @return true/false whether a terminal error has occured
 */
bool start_process(child_pid_list *tmp_node)
{
    bool success = true;

    /* fork a new process to start the module back up */
    pid_t new_pid;  
    printf("EXECUTING: Forking a new process to replace %s \n", tmp_node->item_name);
    new_pid = fork();
    if (0 == new_pid)
    {
        /* execute the file again in the new child process */
        errno = 0;
        if ( (0 != execl(tmp_node->dir, tmp_node->item_name, (char *)NULL)) )
        {
            syslog(LOG_ERR, "ERROR: 'execl()' failed for %s! (%d:%s)", \
                tmp_node->dir, errno, strerror(errno));
            printf("ERROR: 'execl()' failed for %s! (%d:%s) \n", \
                tmp_node->dir, errno, strerror(errno));
            /* force the spawned process to exit */
            exit(-errno);
        }
    }
    else if (-1 == new_pid)
    {
        syslog(LOG_ERR, "ERROR: Failed to fork child process for %s! (%d:%s)", \
            tmp_node->dir, errno, strerror(errno));

        success = false;
    } 
    else
    {
        printf("SUCCESS: New process with PID %d forked successfully \n", new_pid);
            
        tmp_node->child_pid = new_pid;
        /* alive == 0 indicates that the process has been restarted and should be good */
        tmp_node->alive = normal;
    }
    return (success);
}



/**
 * Used to package data for sending open UDP message.
 *
 * @param[in] csocket UDP socket
 * @param[out] success true/false status of sending message
 *
 * @return true/false status of sending message
 */
bool process_openUDP(int32_t csocket)
{
    bool success = true;

    enum openUDP_params
    {
        CMD_ID                  = 2,
        LENGTH                  = 2,
        APP_ID                  = 2,
        MSG_SIZE                =   CMD_ID + 
                                    LENGTH + 
                                    APP_ID,
    };

    ssize_t sendBytes = 0;
    uint8_t *ptr; 
    int16_t val16;
    uint8_t *msgLenPtr;
    uint32_t actualLength = 0;
    uint8_t sendData[ MSG_SIZE ];

    socklen_t UDPaddr_size;

    ptr = sendData;
    val16 = CMD_OPEN;
    memcpy(ptr, &val16, sizeof(val16));
    //remote_set16( ptr , CMD_OPEN);
    ptr += CMD_ID;

    msgLenPtr = ptr;
    ptr += LENGTH;

    *ptr = getpid();
    ptr += APP_ID;

    *ptr = MSG_SIZE;
    ptr += MSG_SIZE;

    // actual length
    actualLength =  MSG_SIZE - CMD_ID - LENGTH;
    memcpy(msgLenPtr, &actualLength, sizeof(actualLength));

    UDPaddr_size = sizeof(DestAddr_UDP);

    // syslog(LOG_NOTICE, "csocket = %d", csocket);
    // syslog(LOG_NOTICE, "sendData = %d", *sendData);
    // syslog(LOG_NOTICE, "MSG_SIZE = %d", MSG_SIZE);

    printf("EXECUTING: Sending OPEN message over UDP \n");
    // send
    sendBytes = sendto(csocket, sendData, MSG_SIZE, 0, (struct sockaddr *)&DestAddr_UDP, UDPaddr_size);
    if (-1 == sendBytes)
    {
        syslog(LOG_ERR, "%s:%d ERROR: 'sendto' failed! (%d: %s)", \
            __FUNCTION__, __LINE__, errno, strerror(errno));   
    }
    else if (MSG_SIZE != sendBytes)
    {
        syslog(LOG_ERR, "%s:%d ERROR: insufficient message data %zd != %u ", \
            __FUNCTION__, __LINE__, sendBytes, MSG_SIZE);   
        success = false;   
    }
    else
    {
        syslog(LOG_DEBUG, "%s:%d UDP 'sendto' successful!",__FUNCTION__, __LINE__);
        printf("SUCCESS: OPEN message sent \n");
        //printf("UDP_OPEN TRUE! \n");
    }

    //printf("UDP_OPEN SIZE: %d\n" , sendBytes);

    return success;
}




/**
 * Receives the system initialization message from AACM
 *
 * @param[in] csocket UDP socket
 *
 * @return true/false whether the message was received
 */
bool process_sysInit( int32_t csocket )
{
    bool gotMsg = false;

    enum sysinit_params
    {
        CMD_ID                  = 2,
        LENGTH                  = 2,
        MSG_SIZE                =   CMD_ID +
                                    LENGTH,
    };

    uint16_t command = 0;
    uint32_t retBytes = 0; 
    uint32_t actualLength = 0; 
    uint32_t calcLength;
    uint8_t retData[ MSG_SIZE ];
    uint8_t *ptr;
    socklen_t toRcvUDP_size;
    struct pollfd myPoll[1];
    int32_t retPoll;

    myPoll[0].fd = csocket;
    myPoll[0].events = POLLIN; 

    printf("EXECUTING: Receiving SYS INIT message \n");
    // WAIT TO RECEIVE RESPONSE ...
    while ( true != gotMsg )
    {
        retPoll = poll(myPoll, 1, -1);
        if ( retPoll == -1 ) 
        {
            syslog(LOG_ERR, "%s:%d ERROR! error from pollfd poll()",__FUNCTION__, __LINE__);
            gotMsg = false;
        }
        else if (retPoll == 0 ) 
        {
            gotMsg = false;
        } 
        else
        {
            if (myPoll[0].revents & POLLIN)
            {
                toRcvUDP_size = sizeof(toRcvUDP);
                retBytes = recvfrom(csocket , retData , MSG_SIZE , 0 , \
                    (struct sockaddr *)&toRcvUDP , &toRcvUDP_size);

                printf("SUCCESS: SYS INIT received \n");
                //command = remote_get16(retData);
                ptr = retData;
                memcpy(&command, ptr, sizeof(command));
                ptr += CMD_ID;

                memcpy(&actualLength, ptr, sizeof(actualLength));
                //actualLength = remote_get16(ptr);
                ptr += LENGTH;

                calcLength = MSG_SIZE - CMD_ID - LENGTH; // shoudl be zero
            }
        }

        // check message
        if ( (retPoll <= 0) || (MSG_SIZE != retBytes) || ( CMD_SYSINIT != command ) \
            || ( calcLength != actualLength ) )
        {
            gotMsg = false;
            if ( (MSG_SIZE != retBytes) )
            {
                syslog(LOG_ERR, "%s:%d ERROR! insufficient message data %u != %u", \
                    __FUNCTION__, __LINE__, retBytes, MSG_SIZE);
            }
            if ( ( CMD_SYSINIT != command ) )
            {
                syslog(LOG_ERR, "%s:%d ERROR! invalid command %u", \
                    __FUNCTION__, __LINE__, command);
            }
            if ( ( calcLength != actualLength ) )
            {
                syslog(LOG_ERR, "%s:%d ERROR! payload not equal to expected number of bytes %u != %u ", \
                    __FUNCTION__, __LINE__, calcLength, actualLength);
            }
            if ( (retPoll <= 0) )
            {
                syslog(LOG_ERR, "%s:%d ERROR! error getting message %u ", \
                    __FUNCTION__, __LINE__, retPoll);
            }
        }
        else
        {
            gotMsg = true;
            //printf("SYS_INIT TRUE\n");
        }
        //printf("SYS_INIT SIZE: %d\n\n", retBytes);
    }
    return gotMsg;
}



/**
 * Sends the list of all processes in the system with the process IDs, names, 
 * and type values immediately after the SYS_INIT message is received.
 *
 * @param[in] csocket: TCP socket
 * @param[in] tmp_node: the pointer to the first item in the linked list
 * @param[in] dirs[]: list of directories for making the process type parameters
 * @param[in] barsm_name[4]: the random 4 char string assigned to barsm (the 
 *      name not stored in the linked list)
 *
 * @return true/false whether a terminal error has occured
 */
bool send_barsmToAacmProcesses( int32_t csocket, child_pid_list *tmp_node, \
    const char *dirs[], char barsm_name[4] )
{
    bool success = true;

    enum registerData_params
    {
        CMD_ID                  = 2,
        LENGTH                  = 2,
        NUM_PROCESSES           = 2, 
        PID                     = 4, 
        PROC_NAME               = 4, 
        PROC_TYPE               = 4,
    };

    uint8_t sendData[ MAXBUFSIZE ];
    uint8_t *ptr;
    uint16_t val16;
    uint8_t *msgLenPtr;
    uint8_t *numProcsPtr;
    uint32_t tmpPid;
    uint8_t tmpChar;
    int32_t i;
    uint32_t type;
    /* Start at 1 for BARSM */
    int32_t num_procs = 1;
    uint32_t actualLength = 0;
    uint32_t msg_size = 0;
    uint32_t sentBytes = 0;

    ptr = sendData;
    val16 = CMD_BARSM_TO_AACM_PROCESSES;
    memcpy(ptr, &val16, sizeof(val16));
    ptr += CMD_ID;

    msgLenPtr = ptr;
    ptr += LENGTH;

    numProcsPtr = ptr;
    ptr += NUM_PROCESSES;

    /* BARSM's info is not stored in the linked list so it needs to be handled 
     * outside of the loop */
    tmpPid = getpid();
    memcpy(ptr, &tmpPid, sizeof(tmpPid));
    ptr += PID;

    for ( i = 0; i < 4; i++ )
    {
        tmpChar = barsm_name[i];
        memcpy(ptr, &tmpChar, sizeof(tmpChar));
        ptr += 1;
    }

    type = 0x0000000C;
    memcpy(ptr, &type, sizeof(type));
    ptr += PROC_TYPE;

    while ( NULL != tmp_node->next )
    {
        if ( downPermanently != tmp_node->alive )
        {
            num_procs += 1;

            tmpPid = tmp_node->child_pid;
            memcpy(ptr, &tmpPid, sizeof(tmpPid));
            ptr += PID;

            for ( i = 0; i < 4; i++ )
            {
                tmpChar = tmp_node->proc_name[i];
                memcpy(ptr, &tmpChar, sizeof(tmpChar));
                ptr += 1;
            }

            if ( NULL != strstr(tmp_node->dir, dirs[0]) )
            {
                type = 0x00000002;
            }
            else if ( NULL != strstr(tmp_node->dir, dirs[1]) )
            {
                type = 0x00000001;
            }
            else if ( NULL != strstr(tmp_node->dir, dirs[2]) )
            {
                type = 0x00000009;
            }
            else if ( NULL != strstr(tmp_node->dir, dirs[3]) )
            {
                type = 0x00000000;
            }
            else if ( NULL != strstr(tmp_node->dir, dirs[4]) )
            {
                type = 0x00000008;
            }
            else
            {
                syslog(LOG_ERR, "%s:%d ERROR: When reading 'dir' for app/mod! ", \
                    __FUNCTION__, __LINE__);
                success = false;
            }
            memcpy(ptr, &type, sizeof(type));
            ptr += PROC_TYPE;
        }
    }

    memcpy(numProcsPtr, &num_procs, sizeof(num_procs));
    actualLength = NUM_PROCESSES + num_procs * (PID + PROC_TYPE + PROC_NAME);
    memcpy(msgLenPtr, &actualLength, sizeof(actualLength));
    msg_size = actualLength + CMD_ID + LENGTH;

    printf("EXECUTING: Sending BARSM TO AACM PROCESSES message over TCP \n");
    sentBytes = send( csocket, sendData, msg_size, 0 );
    if ( sentBytes != msg_size )
    {
        syslog(LOG_ERR, "%s:%d ERROR: Insufficient message data, %u != %u", \
            __FUNCTION__, __LINE__, sentBytes, msg_size);
        success = false;
    }
    else
    {
        printf("SUCCESS: BARSM TO AACM PROCESSES message sent \n");
    }

    return (success);
}



/**
 * Goes through the entire list of modules once, checking if each successfully 
 * started module is still running, and restarts those that have stopped.
 *
 * @param[in] tmp_node: a pointer to the first item in the linked list
 *
 * @return true/false whether a terminal error has occurred
 */ 
bool check_modules(int32_t csocket, child_pid_list *tmp_node)
{
    bool success = true;
    int32_t rc; 
    int32_t waitreturn;

    /* check status of the child processes that are supposed to be running */
    // printf("\n\n in check_modules \n\n");

    while( NULL != tmp_node->next )
    {
        if ( downPermanently != tmp_node->alive )
        {
            errno = 0;
            waitreturn = waitpid(tmp_node->child_pid, &rc, WNOHANG);

            if (-1 == waitreturn)
            {
                tmp_node->alive = handledByBarsmToAacm;

                syslog(LOG_ERR, "ERROR: Process for %s with PID %d no longer exists! (%d:%s)", \
                    tmp_node->dir, tmp_node->child_pid, errno, strerror(errno));
                printf("\nERROR: Process for %s with PID %d no longer exists! (%d:%s) \n", \
                    tmp_node->dir, tmp_node->child_pid, errno, strerror(errno));   
            }
            else if (0 < waitreturn)
            {
                tmp_node->alive = handledByBarsmToAacm;

                syslog(LOG_ERR, "ERROR: Process for %s with PID %d has changed state! (%d:%s)", \
                    tmp_node->dir, tmp_node->child_pid, errno, strerror(errno));
                printf("\nERROR: Process for %s with PID %d has changed state! (%d:%s) \n", \
                    tmp_node->dir, tmp_node->child_pid, errno, strerror(errno));
            }
            else
            {
                /* Process is alive and has not changed state. No action required */
            }

            if ( handledByBarsmToAacm == tmp_node->alive)
            {
                syslog(LOG_DEBUG, "Sending BARSM to AACM MSG");

                /* Send Message to AACM*/
                if (success)
                {
                    success = send_barsmToAacm(csocket, tmp_node);
                }
                else
                {
                    break;
                }

                /* The "receive_barsmToAacmAck()" function also handles the restarting
                 * of all modules that need restarting 
                 */
                receive_barsmToAacmAck(csocket, tmp_node);

            } /* if ( handledByBarsmToAacm == tmp_node->alive) */
        } /* if ( downPermanently != tmp_node->alive ) */
        tmp_node = tmp_node->next;
    } /* while( NULL != tmp_node->next ) */
    return(success);
} /* bool check_modules(child_pid_list *tmp_node) */


bool receive_barsmToAacmAck(int32_t csocket, child_pid_list *tmp_node)
{

    enum barsmToAacmAck_params
    {
        CMD_ID          = 2,
        LENGTH          = 2,
        ERROR           = 2,
    };

    bool success = true;
    uint8_t retData[ MAXBUFSIZE ];
    uint16_t command = 0;
    uint16_t action = 0;
    uint16_t actualLength = 0;
    struct pollfd myPoll[1];
    int32_t retPoll = 0;
    int32_t retBytes = 0;
    uint8_t *ptr;

    myPoll[0].fd = csocket;
    myPoll[0].events = POLLIN; 

    printf("EXECUTING: Receiving BARSM to AACM ACK message \n");
    // WAIT TO RECEIVE RESPONSE ...
    retPoll = poll( myPoll, 1, -1 );
    if ( retPoll == -1 ) 
    {
        syslog(LOG_ERR, "%s:%d ERROR! error from pollfd poll()",__FUNCTION__, __LINE__);
        printf("%s:%d ERROR! error from pollfd poll()",__FUNCTION__, __LINE__);
        //printf("ERROR WITH SELECT\n");
    }
    else if (retPoll == 0 ) 
    {
        syslog(LOG_ERR, "%s:%d ERROR! timeout error from pollfd poll()",__FUNCTION__, __LINE__);
        printf("%s:%d ERROR! timeout error from pollfd poll()",__FUNCTION__, __LINE__);
        //printf("SELECT TIMEOUT ERROR\n");
    } 
    else
    {
        if (myPoll[0].revents & POLLIN)
        {
            /* wait for ACK */
            errno = 0;
            retBytes = recv( csocket , retData , MAXBUFSIZE , 0 );
            if ( -1 == retBytes )
            {
                syslog(LOG_ERR, "%s:%d ERROR: In recv()! (%d: %s) ", \
                    __FUNCTION__, __LINE__, errno, strerror(errno));
            }
            else
            {
                printf("SUCCESS: BARSM to AACM ACK message received (%d bytes) \n", retBytes);
            }

            ptr = retData;
            memcpy(&command, ptr, sizeof(command));
            ptr += CMD_ID;

            memcpy(&actualLength, ptr, sizeof(actualLength));
            ptr += LENGTH;

            memcpy(&action, ptr, sizeof(action));
            ptr += ERROR;

            syslog(LOG_NOTICE, "NOTICE: Restarting %s...", tmp_node->item_name);

            printf("EXECUTING: Restarting %s...", tmp_node->item_name);
            if ( ! start_process(tmp_node) )
            {
                success = false;
            }
            else
            {
                printf("SUCCESS: Restart completed \n");                    
            }

        }
    }

    return (success);
}

bool send_barsmToAacm(int32_t csocket, child_pid_list *tmp_node)
{
    bool success = true;

    enum barsmToAacm_params
    {
        CMD_ID                  = 2,
        LENGTH                  = 2,
        SRC_PID                 = 4,
        SRC_APPNAME             = 4,
        ERROR                   = 2,
        MSG_SIZE                =   CMD_ID + 
                                    LENGTH + 
                                    SRC_PID +
                                    SRC_APPNAME +
                                    ERROR,
    };

    uint8_t sendData[ MSG_SIZE ];
    uint8_t *ptr;
    uint16_t val16 = 0;
    uint8_t *msgLenPtr;
    uint32_t actualLength = 0;
    int32_t sentBytes = 0;

    ptr = sendData;
    val16 = CMD_AACM_TO_BARSM_ACK;
    memcpy(ptr, &val16, sizeof(val16));
    ptr += CMD_ID;

    msgLenPtr = ptr;
    ptr += LENGTH;

    memcpy(ptr, &tmp_node->child_pid, sizeof(SRC_PID));
    ptr += SRC_PID;

    memcpy(ptr, &tmp_node->proc_name[0], sizeof(SRC_APPNAME));
    ptr += SRC_APPNAME;

    val16 = GE_BARSM_TO_AACM_ERR;           /* THIS WILL NEED TO CHANGE ONCE SPECIFIED BY GE */
    memcpy(ptr, &val16, sizeof(val16));
    ptr += ERROR;

    *ptr = MSG_SIZE;
    ptr += MSG_SIZE;

    actualLength = MSG_SIZE - CMD_ID - LENGTH;
    memcpy(msgLenPtr, &actualLength, sizeof(actualLength));

    errno = 0;
    sentBytes = send(csocket, sendData, MSG_SIZE, 0);
    if ( -1 == sentBytes )
    {
        syslog(LOG_ERR, "%s:%d ERROR: Sending of BARSM_TO_AACM MSG failed! (%d: %s)", \
            __FUNCTION__, __LINE__, errno, strerror(errno));
    }
    else if ( 6 != sentBytes )
    {
        syslog(LOG_ERR, "%s:%d ERROR: During ending of BARSM_TO_AACM MSG!", \
            __FUNCTION__, __LINE__);
    }

    return (success);
}



/**
 * Waits for error messages from the AACM, and restarts or terminates modules 
 * and applications as directed in the messages.
 *
 * @param[in] csocket: TCP socket
 * @param[in] tmp_node: a pointer to the first item in the linked list
 *
 * @return void
 */
void receive_aacmToBarsm( int32_t csocket, child_pid_list *tmp_node )
{
    enum aacmToBarsm_params
    {
        CMD_ID                  = 2,
        LENGTH                  = 2,
        PID                     = 4,
        NUM_PROCESSES           = 2,
    };

    uint16_t command = 0;
    uint16_t actualLength = 0;
    uint16_t numErrors = 0;
    uint8_t retData[ MAXBUFSIZE ];
    uint8_t *ptr;
    pid_t srcPid = 0;
    pid_t tmpPid = 0;
    struct pollfd myPoll[1];
    int32_t retPoll = 0;
    int32_t retBytes = 0;

    myPoll[0].fd = csocket;
    myPoll[0].events = POLLIN; 

    printf("EXECUTING: Receiving AACM TO BARSM message \n");
    // WAIT TO RECEIVE RESPONSE ...
    retPoll = poll( myPoll, 1, -1 );
    if ( retPoll == -1 ) 
    {
        syslog(LOG_ERR, "%s:%d ERROR! error from pollfd poll()",__FUNCTION__, __LINE__);
        printf("%s:%d ERROR! error from pollfd poll()",__FUNCTION__, __LINE__);
        //printf("ERROR WITH SELECT\n");
    }
    else if (retPoll == 0 ) 
    {
        syslog(LOG_ERR, "%s:%d ERROR! timeout error from pollfd poll()",__FUNCTION__, __LINE__);
        printf("%s:%d ERROR! timeout error from pollfd poll()",__FUNCTION__, __LINE__);
        //printf("SELECT TIMEOUT ERROR\n");
    } 
    else
    {
        if (myPoll[0].revents & POLLIN)
        {
            errno = 0;
            retBytes = recv( csocket , retData , MAXBUFSIZE , 0 );
            if ( -1 == retBytes )
            {
                syslog(LOG_ERR, "%s:%d ERROR: In recv()! (%d: %s) ", \
                    __FUNCTION__, __LINE__, errno, strerror(errno));
            }
            else
            {
                printf("SUCCESS: AACM TO BARSM message received (%d bytes) \n", retBytes);
            }

            ptr = retData;
            memcpy(&command, ptr, sizeof(command));
            ptr += CMD_ID;

            memcpy(&actualLength, ptr, sizeof(actualLength));
            ptr += LENGTH;

            memcpy(&srcPid, ptr, sizeof(srcPid));
            ptr += PID;

            memcpy(&numErrors, ptr, sizeof(numErrors));
            ptr += NUM_PROCESSES;

            printf("EXECUTING: Restarting all %d apps indicated in AACM TO BARSM message \n", \
                numErrors);
            while ( numErrors > 0 )
            {
                memcpy(&tmpPid, ptr, sizeof(tmpPid));
                ptr += PID;
                start_select(tmpPid, tmp_node, &numErrors);
            }
            printf("SUCCESS: Restarting of apps complete \n");
        }
    }
}



/**
 * Sends a response to the AACM_TO_BARSM message conatining a signal showing
 * whether the app/modules were restarted or terminated.
 *
 * @param[in] csocket: TCP socket
 *
 * @return void
 */
// MODEL AFTER "process_registerApp" in simm_functions.c
void send_aacmToBarsmAck( int32_t csocket )
{
    enum registerApp_params
    {
        CMD_ID                  = 2,
        LENGTH                  = 2,
        ERROR                   = 2,
        MSG_SIZE                =   CMD_ID + 
                                    LENGTH + 
                                    ERROR,
    };

    uint8_t sendData[ MSG_SIZE ];
    uint8_t *ptr;
    uint16_t val16;
    uint8_t *msgLenPtr = 0;
    uint32_t actualLength = 0;
    int32_t sentBytes = 0;

    ptr = sendData;
    val16 = CMD_AACM_TO_BARSM_ACK;
    memcpy(ptr, &val16, sizeof(val16));
    ptr += CMD_ID;

    msgLenPtr = ptr;
    ptr += LENGTH;

    val16 = GE_AACM_TO_BARSM_ERR;           /* THIS WILL NEED TO CHANGE ONCE SPECIFIED BY GE */
    memcpy(ptr, &val16, sizeof(val16));
    ptr += ERROR;

    *ptr = MSG_SIZE;
    ptr += MSG_SIZE;

    actualLength = MSG_SIZE - CMD_ID - LENGTH;
    memcpy(msgLenPtr, &actualLength, sizeof(actualLength));

    printf("EXECUTING: Sending AACM TO BARSM ACK \n");
    errno = 0;
    sentBytes = send(csocket, sendData, MSG_SIZE, 0);
    if ( -1 == sentBytes )
    {
        syslog(LOG_ERR, "%s:%d ERROR: Sending of AACM_TO_BARSM_ACK failed! (%d: %s)", \
            __FUNCTION__, __LINE__, errno, strerror(errno));
    }
    else if ( 6 != sentBytes )
    {
        syslog(LOG_ERR, "%s:%d ERROR: During ending of AACM_TO_BARSM_ACK!", \
            __FUNCTION__, __LINE__);
    }
    else
    {
        printf("SUCCESS: ACK sent \n");
    }
}



/**
 * Selects the item in the linked list that matches the given PID, and calls
 * the start_process() with that item of the linked list.
 *
 * @param[in] pid: the PID of the process that needs to be replaced/restarted
 * @param[in] tmp_node: a pointer to the first item in the linked list
 *
 * @return true/false whether a terminal error occured
 */
bool start_select(pid_t pid, child_pid_list *tmp_node, uint16_t *numErrors)
{
    bool success = true;

    while ( NULL != tmp_node->next )
    {

        /* check that the old process was terminated before starting a new process */
        errno = 0;        
        if ( -1 == kill(tmp_node->child_pid , SIGTERM) )
        {
            printf("%s:%d ERROR! Not able to kill process with PID %d (%d:%s)", \
                __FUNCTION__, __LINE__, tmp_node->child_pid , errno, strerror(errno));

            success = false;
        }
        else
        {
            printf("SUCCESS: Process with PID %d eliminated successfully \n", \
                tmp_node->child_pid );
        }

        
        printf("EXECUTING: Starting new process for old process with PID %d \n", pid);
        if ( ! start_process(tmp_node) )
        {
            success = false;
        }
        else
        {
            printf("SUCCESS: New process startup completed \n");
        }

        tmp_node = tmp_node->next;

        *numErrors = *numErrors - 1;
    }

    return (success);
}


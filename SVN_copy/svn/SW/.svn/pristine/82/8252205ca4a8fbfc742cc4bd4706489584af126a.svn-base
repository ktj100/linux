//=========================================================================================================================================================
// GET
// ASSIMILATOR 
// SIMM - Sensor Interface Master Module
// David Norwood
// Travis Kuiper
// 
// -	Sensor Interface Master Module (SIMM)
//      o	SIMM shall interface with SI node, Convert RAW data to Logical value and get Logical  data to send to the AACM.
//      o	SIMM shall implement the GE API for Master Modules – that will enable standard communication between SIMM and AACM.
//      o	If there is problem communicating with the SI node then an error message is sent to the AACM.
//      o	SIMM shall interface with AACM as per ICD defined in document - API ICD for DornerWorks.docx.
// 
// valgrind: --tool=memcheck --read-var-info=yes --leak-check=full --track-origins=yes --show-reachable=yes --show-possibly-lost=yes --malloc-fill=B5 --free-fill=4A
// ========================================================================================================================================================
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <dirent.h>
#include <stdio.h>
#include <libgen.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <syslog.h>
#include <unistd.h>
#include <stdint.h>
#include <stdbool.h>
#include <signal.h>
#include <time.h>
#include <pthread.h>

#include "simm_functions.h"
#include "sensor.h"
//#include "fpga_sim.h"
#include "fpga_read.h"

// THREADS
static pthread_t thread_TCP;        // read, write TCP
static pthread_t sensor_thread;     // get FPGA data
static pthread_t thread_subscribe;  // waits for a subscribe and returns subscribe_ack

pthread_mutex_t pubMutex                = PTHREAD_MUTEX_INITIALIZER;

//  char UDPAddress[]   = "225.0.0.37";
//  int UDPPort         =  4096;
    char UDPAddress[] = "127.0.0.1";
    int UDPPort =  4096;


// FUNCTION DECLARATIONS
static bool simm_init(void);
static bool setupPublishStructure(void);
static void simm_run(void); // calls/setup the threads
static void* simm_runtime_publish(void *param);
static void* simm_runtime_subscribe(void *param);
static void* read_sensors(void *param);

bool UDPsetup(void);
bool TCPsetup(void);

// GLOBALS
static int32_t clientSocket_TCP = -1;
static int32_t clientSocket_UDP = -1;
struct sockaddr_in DestAddr_TCP;
struct sockaddr_in DestAddr_UDP;
struct sockaddr_in DestAddr_SUBSCRIBE;


//int32_t Logicals[5];
int32_t Logicals[33];
int32_t TimeStamp_s[9];
int32_t TimeStamp_ns[9];
bool publish = false;

struct timespec goStart;

int32_t main(int32_t UNUSED(argc), char UNUSED(*argv[]))
{
    bool success_simm = true;

    openlog(DAEMON_NAME, LOG_CONS, LOG_LOCAL0);
    syslog(LOG_INFO, DAEMON_NAME " started");

    if ( false != simm_init() ) 
    {
        syslog(LOG_INFO, "%s:%d simm_init() SUCCESS!", __FUNCTION__, __LINE__);
        simm_run();
    } 
    else 
    {
        success_simm = false;
        syslog(LOG_ERR, "%s:%d simm_init() ERROR!", __FUNCTION__, __LINE__);
    }

    // shutdown/cleanup

    return success_simm;
}

static bool simm_init(void) // 2.1
{
    bool success            = true; 
    bool success_sub        = true; 
    bool success_subAck     = true; 
    bool success_bPD        = true;


    //int32_t sizeofSubscribedMPs = 0;

    // not sure about this block
//  errno = 0;
//  if (0 > sigfillset(&set))
//  {
//      success = false;
//      syslog(LOG_ERR, "%s:%d unable to generate fillset (%d:%s)",__FUNCTION__, __LINE__, errno, strerror(errno));
//  }
//
//      errno = 0;
//      if (0 > sigdelset(&set, SIGCHLD))
//      {
//          success = false;
//          syslog(LOG_ERR, "%s:%d unable to remove SIGCHLD (%u) from signal set (%d:%s)",__FUNCTION__, __LINE__, SIGCHLD, errno, strerror(errno));
//      }
//
//  rc = pthread_sigmask(SIG_BLOCK, &set, NULL);
//  if (0 != rc)
//  {
//      success = false;
//      syslog(LOG_ERR, "%s:%d unable to set sigmask (%d:%s)",__FUNCTION__, __LINE__, rc, strerror(rc));
//  }
    // end block


    clock_gettime( CLOCK_REALTIME , &goStart );

//  printf("START FPGA_INIT\n");
//  if (false != success)
//  {
//      success = fpga_init();
//  }
//  printf("PASSED FPGA_INIT\n");

    if (false != success)
    {
        success = UDPsetup();
    }

    if (false != success)
    {
        success = TCPsetup();
    }

    if (false != success)
    {
        success = process_registerApp( clientSocket_TCP , goStart );
    }

    if (false != success)
    {
        success = process_registerApp_ack( clientSocket_TCP );
    }

    if (false != success)
    {
        success = process_registerData( clientSocket_TCP );
    }

    if (false != success)
    {
        success = process_registerData_ack( clientSocket_TCP );
    }

    if (false != success)
    {
        sleep(2);   // currently need for python script ... 
        success = process_openUDP( clientSocket_UDP , DestAddr_UDP );
    }
    
    if (false != success)
    {
        success = process_sysInit( clientSocket_UDP );
    }

    if (false != success)
    {
        success = setupPublishStructure();
    }

    if (false != success)
    {
        success_sub     = process_subscribe( clientSocket_TCP );
        success_bPD     = buildPublishData();
        success_subAck  = process_subscribe_ack( clientSocket_TCP , DestAddr_TCP );

        if ( false == ( success_sub || success_bPD || success_subAck ) )
        {
            success = false;
        }
    }

    return success;
}

static void simm_run(void)
{
        bool success = true;
        int32_t rc_sensor, rc_publish, rc_subscribe;
        sigset_t set;
        siginfo_t sig;

        // CREATE SENSOR THREAD
        // looks to be ~272 possibly lost bytes per valgrind with each thread.
        errno = 0;
        rc_sensor = pthread_create(&sensor_thread, NULL, read_sensors, NULL);
        if(0 != rc_sensor)
        {
            success = false;
            syslog(LOG_ERR, "%s:%d ERROR! failed to create sensor thread (%d:%s)",__FUNCTION__, __LINE__, rc_sensor, strerror(rc_sensor));
        }

        // CREATE PUBLISH THREAD (UDP)
        // looks to be ~272 possibly lost bytes per valgrind with each thread.
        errno = 0;
        rc_publish = pthread_create(&thread_TCP, NULL, simm_runtime_publish, NULL);
        if (0 != rc_publish)
        {
            success = false;
            syslog(LOG_ERR, "%s:%d ERROR! failed to create TCP thread (%d:%s)",__FUNCTION__, __LINE__, rc_publish, strerror(rc_publish));
        }

        // CREATE SUBSCRIBE THREAD (UDP)
         // looks to be ~272 possibly lost bytes per valgrind with each thread.
        errno = 0;
        rc_subscribe = pthread_create(&thread_subscribe, NULL, simm_runtime_subscribe, NULL);
        if (0 != rc_subscribe)
        {
            success = false;
            syslog(LOG_ERR, "%s:%d ERROR! failed to create TCP thread (%d:%s)",__FUNCTION__, __LINE__, rc_subscribe, strerror(rc_subscribe));
        }

        errno = 0;
        if (0 > sigfillset(&set))
        {
            success = false;
            syslog(LOG_ERR, "%s:%d ERROR! unable to generate fillset (%d:%s)",__FUNCTION__, __LINE__, errno, strerror(errno));
        }

        // signal handling .. are these the ones I need?
        while (true == success)
        {
            errno = 0;
            if (0 >= sigwaitinfo(&set, &sig))
            {
                success = false;
                syslog(LOG_ERR, "%s:%d ERROR! waiting for signals (%d:%s)",__FUNCTION__, __LINE__, errno, strerror(errno));
                printf("\nsigwaitinfo error\n");
            }
            else
            { /* ! (0 >= sigwaitinfo(&set, &sig)) */
                /* some signals are expected, so just print debugging information
                 * and continue */
                switch (sig.si_signo)
                {
                case SIGCHLD:
                    syslog(LOG_DEBUG, "DEBUG! ignoring signal %d (code: %d, pid: %d, uid: %d, status: %d)",sig.si_signo, sig.si_code, sig.si_pid, sig.si_uid, sig.si_status);
                    break;
                case SIGALRM:
                case SIGPIPE:
                    syslog(LOG_DEBUG, "DEBUG! ignoring signal %d (code: %d, value: %d)",sig.si_signo, sig.si_code, sig.si_value.sival_int);
                    break;
                default:
                    /* print as much debugging as possible for the unhandled sig. */
                    syslog(LOG_WARNING, "WARNING! received signal %d (code: %d, pid: %d, uid: %d, addr: %p)",sig.si_signo, sig.si_code, sig.si_pid, sig.si_uid, sig.si_addr);
                    /* exit the application */
                    success = false;
                    break;
                } /* switch (sig.si_signo) */
            } /* else ! (0 >= sigwaitinfo(&set, &sig)) */
        }
        /* set of signals to watch for */
        /* watch for signals */
  }


static void* simm_runtime_subscribe(void * UNUSED(param) )
{
    int32_t rc;
    bool success, success_sub_run, success_subAck_run, success_bPD_run, success_sub_malloc_run = true;
    int32_t numSub;

    rc = pthread_detach( pthread_self() );
    if (rc != 0)
    {
      success = false;
      syslog(LOG_ERR, "%s:%d ERROR! Failed to detach thread (%d:%s)",__FUNCTION__, __LINE__, rc, strerror(rc));
    }

    numSub = 0;
    printf("SUBSCRIBE THREAD STARTED!\n");
    while ( 1 )
    {
        success_sub_run = process_subscribe( clientSocket_TCP );
        numSub++;

        pthread_mutex_lock(&pubMutex);

        num_topics_total++;

        publishMe = realloc(publishMe, sizeof(topicToPublish)*num_topics_total);
        if (NULL == publishMe)
        {
            success_sub_malloc_run = false;
            syslog(LOG_ERR, "%s:%d REALLOC ERROR!", __FUNCTION__, __LINE__);
            printf("BAD REALLOC: publishMe in buildPublishData\n");
        }

        currentTopic++;
        success_bPD_run = buildPublishData();
        pthread_mutex_unlock(&pubMutex);

        success_subAck_run = process_subscribe_ack( clientSocket_TCP , DestAddr_TCP );
        if ( false == ( success_sub_run || success_subAck_run || success_bPD_run || success_sub_malloc_run ) )
        {
            success = false;
        }
    }
}


// This is the thread for processing PUBLISH every second
static void* simm_runtime_publish(void * UNUSED(param) )
{
    int32_t rc, cntPublishes, i;
    static int32_t numberToPublish;
    bool success = true;
    bool timeHasElapsed = true;
    struct timespec sec_begin, sec_end;
    struct timespec timeToWait, currentTime;
    int rt;

    rc = pthread_detach( pthread_self() );
    if (rc != 0)
    {
        success = false;
        syslog(LOG_ERR, "%s:%d ERROR! Failed to detach thread (%d:%s)",__FUNCTION__, __LINE__, rc, strerror(rc));
    }

    printf("PUBLISH THREAD STARTED!\n");
    numberToPublish = 0;
    nextPublishPeriod = 1000;
    clock_gettime(CLOCK_REALTIME, &sec_begin);  

    while ( true == success )
    {
        if (false == timeHasElapsed)
        {
            clock_gettime(CLOCK_REALTIME, &sec_end);                        // time to check
            timeHasElapsed = numSecondsHaveElapsed(sec_begin, sec_end, 1);     // check elapsed time of 1 second ... consider changing this based on nextPublishPeriod
        }
        else
        {
            pthread_mutex_lock(&pubMutex);
            cntPublishes = 0;
            for( i = 0 ; i < num_topics_total ; i++ )
            {
                if (true == publishMe[i].publishReady)
                {
                    process_publish( clientSocket_UDP , DestAddr_UDP , Logicals , TimeStamp_s , TimeStamp_ns, i );
                    cntPublishes++; 
                }
                if ( (numberToPublish == cntPublishes) && (numberToPublish == num_topics_total) )
                {
                    nextPublishPeriod = 0;
                }
            }

            printf("\n\n\nFROM PUBLISH THREAD, nextPublishPeriod: %d\n", nextPublishPeriod);
            timeHasElapsed = false;
            clock_gettime(CLOCK_REALTIME, &sec_begin);
            nextPublishPeriod += 1000;
            numberToPublish = publishManager();
            pthread_mutex_unlock(&pubMutex);

        }
    }
}


static void* read_sensors(void * UNUSED(param) )
{
bool success = true;
    int32_t rc;

    uint32_t voltages[5] = {0,0,0,0,0};
    uint32_t timestamps[9] = {0,0,0,0,0,0,0,0,0};
    uint32_t ts_HiLoCnt[3] = {0,0,0};

    printf("Thread Started!\n");

    // detach the thread so that main can resume
    errno = 0;
    rc = pthread_detach(pthread_self());
    if (rc != 0)
    {
        printf("ERROR: Thread detaching unsuccessful: (%d)\n", errno);
    }

    // LOOP FOREVER, BULDING X SECONDS WORTH OF DATA AND EXPORTING
    while(success)
    {
        // CONTAINS A BLOCKING READ FOR THE FPGA INTERRUPT REGISTERS
        if ( false == wait_for_fpga() )
        {
            success = false;
        }
        // printf("\nFPGA Ready!\n");

        /* GET FPGA DATA IMMEDIATELY */
        get_fpga_data(&voltages[0], &timestamps[0], &ts_HiLoCnt[0]);

        pthread_mutex_lock(&pubMutex);

        // GET LOGICAL VALUES FROM REGISTERS
        make_logicals(&voltages[0]);
        // ADD ERROR CHECKING FOR STATUS

        // GET TIMESTAMPS FOM REGISTERS
        calculate_timestamps(&timestamps[0], &ts_HiLoCnt[0]);
        // ADD ERROR CHECKING FOR STATUS

        pthread_mutex_unlock(&pubMutex);
    }

//  int32_t rc, fpga_ready;
//  int32_t get_lv_status, get_ts_status;
//
//  // detach the thread so that main can resume
//  errno = 0;
//  rc = pthread_detach(pthread_self());
//  if (rc != 0)
//  {
//      syslog(LOG_ERR, "%s:%d ERROR! Failed to detach thread (%d:%s)",__FUNCTION__, __LINE__, rc, strerror(rc));
//      printf("ERROR: Thread detaching unsuccessful: (%d)\n", errno);
//  }
//
//  printf("SENSOR THREAD STARTED!\n");
//  // LOOP FOREVER, BULDING X SECONDS WORTH OF DATA AND EXPORTING
//  while(1)
//  {
//      // WAIT FOR SIGNAL FROM FPGA
//      // ADD ERROR FOR >1 SEC TIMEOUT
//      for(fpga_ready = 0; 1 != fpga_ready;)
//      {
//          // "fpga_ready" WILL BE TRIGGERED BY AN INTERRUPT LATER
//          fpga_ready = wait_for_fpga();
//          // ADD ERROR SCENARIOS
//          if(0 == fpga_ready)
//          {
//
//          }
//      }
//
//      // GET LOGICAL VALUES FROM REGISTERS
//      get_lv_status = get_logicals(Logicals, 5);
//      // ADD ERROR CHECKING FOR STATUS
//      if(1 == get_lv_status)
//      {
//
//      }
//      else if (0 == get_lv_status)
//      {
//
//      }
//
//      // GET TIMESTAMPS FOM REGISTERS
//      get_ts_status = get_timestamps(TimeStamp_s, TimeStamp_ns, 9);
//      // ADD ERROR CHECKING FOR STATUS
//      if(get_ts_status)
//      {
//
//      }
//  }
}


bool UDPsetup(void) 
{
    bool success        = true;

    // multicast - still 100% on how this struct, setsockopt,  and IP_ADD_MEMBERSHIP tie together.  
    struct ip_mreq mreq;

    if (true == success)
    {
        errno = 0;
        clientSocket_UDP = socket(AF_INET, SOCK_DGRAM, 0);
        if (0 > clientSocket_UDP)
        {
            printf("ERROR WITH UDP SOCKET\n");
            success = false;
            syslog(LOG_ERR, "%s:%d ERROR! Failed to create UDP socket %d (%d:%s) ", __FUNCTION__, __LINE__, clientSocket_UDP, errno, strerror(errno));
        }
    }

    errno = 0;
    if (true == success)
    {
        //memset((char *) &DestAddr_UDP, 0, sizeof(DestAddr_UDP));
        memset(&DestAddr_UDP,0,sizeof(DestAddr_UDP));				// clear struct
        //bzero( &DestAddr_UDP , sizeof(DestAddr_UDP ) );
        DestAddr_UDP.sin_family = AF_INET;					        // must be this
        DestAddr_UDP.sin_port = htons(UDPPort);	                    // set the port to write to
        DestAddr_UDP.sin_addr.s_addr = inet_addr(UDPAddress);       // set destination IP address
        memset(&(DestAddr_UDP.sin_zero), '\0', 8);                  // zero the rest of the struct
        //sizeof(DestAddr_UDP.sin_zero)
    }
    return success;
}

bool TCPsetup(void) 
{
    bool success            = true;
    char ServerIPAddress[]  = "127.0.0.1";
    int TCPServerPort       =  8000;

    if (true == success)
    {
        errno = 0;
        clientSocket_TCP = socket(AF_INET, SOCK_STREAM, 0);
        if (0 > clientSocket_TCP)
        {
            success = false;
            syslog(LOG_ERR, "%s:%d ERROR! Failed to create socket %d (%d:%s) ", __FUNCTION__, __LINE__, clientSocket_TCP, errno, strerror(errno));
        }
    }

    errno = 0;
    if (true == success)
    {
        memset(&DestAddr_TCP,0,sizeof(DestAddr_TCP));				// clear struct
        DestAddr_TCP.sin_family = AF_INET;					        // must be this
        DestAddr_TCP.sin_port = htons(TCPServerPort);	            // set the port to write to
        DestAddr_TCP.sin_addr.s_addr = inet_addr(ServerIPAddress);  // set destination IP address
        memset(&(DestAddr_TCP.sin_zero), '\0', 8);                  // zero the rest of the struct

        if (0 != connect(clientSocket_TCP,(struct sockaddr *)&DestAddr_TCP, sizeof(DestAddr_TCP)))
        {
            success = false;
            syslog(LOG_ERR, "%s:%d ERROR! TCP failed to connect %u (%d:%s) ", __FUNCTION__, __LINE__, DestAddr_TCP.sin_port, errno, strerror(errno));
        }
    }
    return success;
}

bool setupPublishStructure(void)
{
    bool success = true;

    currentTopic        = 0;
    num_topics_total    = 1;
    prevPeriodChk       = 0;

    publishMe = malloc(sizeof(topicToPublish));
    if (NULL == publishMe)
    {
        syslog(LOG_ERR, "%s:%d MALLOC ERROR!", __FUNCTION__, __LINE__);
        success = false;
    }

    publishMe[ currentTopic ].topicSubscription = malloc(sizeof(MPinfo));
    if (NULL == publishMe[ currentTopic ].topicSubscription)
    {
        syslog(LOG_ERR, "%s:%d MALLOC ERROR!", __FUNCTION__, __LINE__);
        success = false;
    }
    return success;
}

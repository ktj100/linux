#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <errno.h>
#include <syslog.h>
#include <string.h>
#include <time.h>
#include <stdbool.h>

#include "sensor.h"
#include "fpga_sim.h"

#define DEBUG_PRINT 0
#define CLOCK_OFFSET_TOLERANCE 2    // in seconds
#define MAX_DATA_PERIOD 60          // in seconds

;

const int32_t MAX_TS_PERIOD = MAX_DATA_PERIOD*9;
int64_t last_ts = 0;
int64_t offset = 0;

/* This function allocates storage space for the data values that will be read in from the fpga.
 * Each array of values will store the last MAX_DATA_PERIOD worth of data, overwriting each value 
 * as new values are read in. Index values will keep track of the location of the newest value
 * read in from the FPGA. */
int32_t subscribe_config(void)
{
    // ALLOCATE SPACE FOR THE STORAGE OF THE LOGICAL VALUES
    // = maximum period of collection time in seconds
    pfp_values = (int32_t*)malloc(MAX_DATA_PERIOD * sizeof(int32_t));
    ptlt_values = (int32_t*)malloc(MAX_DATA_PERIOD * sizeof(int32_t));
    ptrt_values = (int32_t*)malloc(MAX_DATA_PERIOD * sizeof(int32_t));
    tcmp_values = (int32_t*)malloc(MAX_DATA_PERIOD * sizeof(int32_t));
    cop_values = (int32_t*)malloc(MAX_DATA_PERIOD * sizeof(int32_t));
    logical_index = MAX_DATA_PERIOD - 1;

    // ALLOCATE SPACE FOR THE STORAGE OF THE TIMESTAMP VALUES
    // = maximum period of collection time in seconds * 9 values per second
    cam_secs = (int32_t*)malloc(MAX_TS_PERIOD * sizeof(int32_t));
    cam_nsecs = (int32_t*)malloc(MAX_TS_PERIOD * sizeof(int32_t));
    timestamp_index = MAX_TS_PERIOD - 1;

    /* FILL ARRAYS WITH ZEROS TO START OFF */
    memset(pfp_values, 0, MAX_DATA_PERIOD * sizeof(int32_t));
    memset(ptlt_values, 0, MAX_DATA_PERIOD * sizeof(int32_t));
    memset(ptrt_values, 0, MAX_DATA_PERIOD * sizeof(int32_t));
    memset(tcmp_values, 0, MAX_DATA_PERIOD * sizeof(int32_t));
    memset(cop_values, 0, MAX_DATA_PERIOD * sizeof(int32_t));
    memset(cam_secs, 0, MAX_TS_PERIOD * sizeof(int32_t));
    memset(cam_nsecs, 0, MAX_TS_PERIOD * sizeof(int32_t));

    return(0);
}

/* This function calculates the offset to be added to the cam timestamps, so that a true time is
 * stored, rather than a time realtive to startup. */
void clock_config(void)
{
    struct timespec real_time;
    struct timespec time_from_launch;

    int64_t full_real_time;
    int64_t full_time_from_launch;

    clock_gettime(CLOCK_REALTIME, &real_time);
    clock_gettime(CLOCK_MONOTONIC, &time_from_launch);

    full_real_time = ((real_time.tv_sec * 1000000000L) + real_time.tv_nsec);
    full_time_from_launch = ((time_from_launch.tv_sec * 1000000000L) + time_from_launch.tv_nsec);

    /* Offset value needs to be stored with units of 10 ns */
    offset = (full_real_time - full_time_from_launch) / 10;
}

int32_t get_logicals(void)
{
    int32_t voltages[5] = {0,0,0,0,0};

    // READ IN 1 HZ VOLTAGE VALUES
    fpga_sim_voltages(&voltages[0]);

    if ( MAX_DATA_PERIOD - 1 <= logical_index )
    {
        logical_index = 0;
    }
    else
    {
        logical_index++;
    }

    pfp_values[logical_index] = convert_pfp(voltages[0]);
    ptlt_values[logical_index] = convert_ptxt(voltages[1]);
    ptrt_values[logical_index] = convert_ptxt(voltages[2]);
    tcmp_values[logical_index] = convert_tcmp(voltages[3]);
    cop_values[logical_index] = convert_cop(voltages[4]);

    /* DEBUGGING */
    // print out the last DEBUG_PRINT stored values
    // this chunk of code results in many VALGRIND errors !!!!
    int32_t i, j;
    for (i = DEBUG_PRINT-1; i >= 0; i--)
    {
        if ( logical_index - i < 0 )
        {
            j = logical_index - i + 60;
        }
        else
        {
            j = logical_index - i;
        }

        printf("\nPFP %d: %d\n", j+1, pfp_values[j]);
        printf("PTLT %d: %d\n", j+1, ptlt_values[j]);
        printf("PTRT %d: %d\n", j+1, ptrt_values[j]);
        printf("TCMP %d: %d\n", j+1, tcmp_values[j]);
        printf("COP %d: %d\n", j+1, cop_values[j]);
    }

    return(0);
}

int32_t convert_pfp (int32_t voltage)
{
    int32_t pressure;

    /* This algorithm is only for testing. Actual algorithm will replace it. */
    pressure = voltage / 20;

    return (pressure);
}

int32_t convert_ptxt (int32_t voltage)
{
    int32_t temp;

    /* This algorithm is only for testing. Actual algorithm will replace it. */
    temp = voltage / 20;

    return (temp);
}

int32_t convert_tcmp (int32_t voltage)
{
    int32_t temp;

    /* This algorithm is only for testing. Actual algorithm will replace it. */
    temp = voltage / 200;

    return (temp);
}

int32_t convert_cop (int32_t voltage)
{
    int32_t pressure;

    /* This algorithm is only for testing. Actual algorithm will replace it. */
    pressure = voltage / 500 - 5;

    return (pressure);
}

int32_t get_timestamps(void)
{
    int64_t timestamps[9] = {0,0,0,0,0,0,0,0,0};

    // READ IN TIMESTAMPS
    fpga_sim_timestamps(&timestamps[0]);

    // ADD IN REAL TIME OFFSET VALUE
    int32_t i;
    for (i = 0; i < 9 && timestamps[i] != 0; i++)
    {
        timestamps[i] = timestamps[i] + offset;
    }

    // STORE TIMESTAMPS SEPARATELY AS SECONDS AND NANOSECONDS
    split_timestamps(&timestamps[0]);

    return(0);
}

void split_timestamps(int64_t *timestamps)
{
    int32_t dif;
    struct timespec real_time;

    int32_t i;
    for(i = 0; i < 9; i++)
    {
        /* Each tick in the timestamps represents 10 ns */
        if ( MAX_TS_PERIOD - 1 <= timestamp_index )
        {
            timestamp_index = 0;
        }
        else
        {
            timestamp_index++;
        }
        cam_secs[ timestamp_index ] = timestamps[i] / 100000000L;
        cam_nsecs[ timestamp_index ] = (timestamps[i] - cam_secs[ timestamp_index ] * 100000000L) * 10;
        // printf("Nano Stamps: %d\n", cam_nsecs[tot_stamps[1] + i]);
    }

    /* DEBUGGING */
    // print out all stored values
    int32_t j;
    for (i = DEBUG_PRINT-1; i >= 0; i--)
    {
        if ( timestamp_index - i < 0 )
        {
            j = timestamp_index - i + (60*9);
        }
        else 
        {
            j = timestamp_index - i;
        }
        printf("Second Stamp %d: %d\n", j+1, cam_secs[j]);
    }

    for (i = DEBUG_PRINT-1; i >= 0; i--)
    {
        if ( timestamp_index - i < 0 )
        {
            j = timestamp_index - i + (60*9);
        }
        else
        {
            j = timestamp_index - i;
        }
        printf("Nano Stamp %d:   %d\n", j+1, cam_nsecs[j]);
    }

    /* DEBUGGING */
    printf("Logical Index: %d\nTimestamp Index: %d\n", logical_index, timestamp_index);

    // CHECK IF TIMESTAMP OFFSET ADJUSTMENT IS WORKING PROPERLY
    clock_gettime(CLOCK_REALTIME, &real_time);
    dif = real_time.tv_sec - cam_secs[timestamp_index-8];

    if( abs(dif) > CLOCK_OFFSET_TOLERANCE )
    {
        printf("\nERROR: Clock offset correction unsuccessful!\n");
        printf("ERROR may have been caused by the FPGA starting its timestamp values more ");
        printf("than %d second(s) after startup.\nOffset: %d\n\n", CLOCK_OFFSET_TOLERANCE, dif);
    }

    // DEBUGGING ----------------------------------------------------------------------------------------------------------

    // int32_t min, correct_order;
    // int32_t non_zero_ts, temp_index;
    // // ts_to_check the value for how many of the timestamps will be checked for value errors 
    // int32_t ts_to_check = 59;
    // int64_t full_stamp[ts_to_check];

    // else
    // {
    //     printf("Offset: %d \n", dif);
    // }

    // // CHECK FOR ERRORS IN THE TIMESTAMPS
    // if ( 0 > timestamp_index - ts_to_check )
    // {
    //     min = timestamp_index + MAX_TS_PERIOD - ts_to_check;
    // }
    // else
    // {
    //     min = timestamp_index - ts_to_check;
    // }

    // non_zero_ts = 0;
    // correct_order = 0;
    // temp_index = timestamp_index;
    // while ( temp_index != min )
    // {
    //     /* Create full timestamp */
    //     full_stamp[non_zero_ts] = cam_secs[temp_index]*1000000000L + cam_nsecs[temp_index];

    //     /* We don't care about timestamps that are padded zeros, so we don't add them to 
    //      * the array that needs to be checked for correctness. */
    //     if ( 0 != full_stamp[non_zero_ts] )
    //     {
    //         if ( 0 != non_zero_ts )
    //         {
    //             if ( full_stamp[non_zero_ts] > full_stamp[non_zero_ts-1] )
    //             {
    //                 printf("\nERROR: Timestamps are out of order! \n");
    //                 dif = ( full_stamp[non_zero_ts] - full_stamp[non_zero_ts-1] ) / 1000000000L;
    //                 printf("TS %d is %d after TS %d \n", non_zero_ts, dif, non_zero_ts-1);
    //                 printf("First: %lu \nSecond: %lu \n\n", full_stamp[non_zero_ts], full_stamp[non_zero_ts-1]);
    //             }
    //             else
    //             {
    //                 correct_order++;
    //             }
    //         }
    //         non_zero_ts++;
    //     }

    //     if ( 0 > temp_index - 1 )
    //     {
    //         temp_index = temp_index + MAX_TS_PERIOD - 1;
    //     }
    //     else
    //     {
    //         temp_index--;
    //     }

    //     /* DEBUGGING */
    //     // printf("error checking...\n");
    // }
    // if ( correct_order != (total_ts-1) && 50 > total_ts )  // WARNING: non-fuctinoal!
    // {
    //     printf("ERROR: Order checking failed! (Checked: %d, Successes: %d)\n", total_ts-1, correct_order);
    //     printf("\nNon-functional code here!\n\n");
    // }
    // else
    // {
    //     printf("Order checking successful! \n");
    //     printf("\nNon-functional code here!\n\n");
    // }

    // --------------------------------------------------------------------------------------------------------------------
}
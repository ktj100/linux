#!/usr/bin/env python3

# This program will check the timing on the BARSM monitoring period. One thirty second 
# application will be loaded and it will be verified that the app restarts have a
# period of 55 to 65 seconds.

import sys
import os.path
sys.path.append(os.path.join(os.path.dirname(__file__), '../utils'))

import log
import barsm_utils

import subprocess
import time

def run():
    result = False

    # clear out all app directories
    barsm_utils.remove()

    # compile needed applications and place in required directories
    subprocess.call('gcc '+barsm_utils.apps_loc+'/infinite_sec.c -o /opt/rc360/system/aacm', shell=True)
    subprocess.call('gcc '+barsm_utils.apps_loc+'/thirty_sec.c -o /opt/rc360/modules/TPA/thirty_sec', shell=True)

    # navigate to the end of the SYSLOG
    follow = log.logfollower()

    # start barsm
    barsm_utils.start_barsm()

    barsm_utils.aacm_setup()

    # Default the time difference to a value that indicates failure
    dif = 0

    # launch processes
    launch_result, launch_finish_ts = barsm_utils.monitor_launch()

    if launch_result == 2:
        #TODO: have a maximum time limit to look for the restart messages
        # capture the time of the first restart
        restarts = 0
        restartPid = 0
        while 1 > restarts:
            print("Waiting for first restart...")
            #var1, restartPid = barsm_utils.receiveBarsmToAacm(barsm_utils.get_TCPconn, barsm_utils.get_sVal)
            #if restartPid:
            #    barsm_utils.sendBarsmToAacmAck(barsm_utils.get_TCPconn, barsm_utils.get_sVal, restartPid)

            time.sleep(5)
            logs = follow.read('barsm')
            #print(logs)
            if (logs):
                #receive message, send ack
                barsm_utils.get_Message()
            restarts = sum(1 for d in logs if "Restarting" in d.get('message'))

        restart1_ts = list(filter(lambda t: "Restarting" in t['message'], logs))[0]['timestamp']

        # capture the time of the second restart
        restarts = 0
        restartPid = 0
        while 1 > restarts:
            print("Waiting for second restart...")
            #var1, restartPid = barsm_utils.receiveBarsmToAacm(TCPconn, sVal)
            #if restartPid:
            #    barsm_utils.sendBarsmToAacmAck(TCPconn, sVal, restartPid)
            time.sleep(5)
            logs = follow.read('barsm')
            #print(logs)
            restarts = sum(1 for d in logs if "Restarting" in d.get('message'))

        restart2_ts = list(filter(lambda t: "Restarting" in t['message'], logs))[0]['timestamp']

        # compare timestamps
        dif = (restart2_ts - restart1_ts).total_seconds()

    # kill off all started processes
    barsm_utils.kill_procs()

    if launch_result == 2 and 55 <= dif and 65 >= dif:
        result = True

    print('{}'.format('PASSED' if result else 'FAILED'))
    return result

if __name__ == '__main__':
    run()

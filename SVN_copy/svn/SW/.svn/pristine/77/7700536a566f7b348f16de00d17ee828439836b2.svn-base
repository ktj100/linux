#define BARSM_TO_AACM_INIT_ACK_MSG 0x00100000
#define UNUSED(x) (x)__attribute__((unused))

enum WhichMsg 
{
    CMD_BARSM_TO_AACM               = 0x000C,
    CMD_BARSM_TO_AACM_ACK           = 0x000D,
    CMD_AACM_TO_BARSM               = 0x000E,
    CMD_AACM_TO_BARSM_ACK           = 0x000F,
    CMD_BARSM_TO_AACM_INIT          = 0x0001,
    CMD_BARSM_TO_AACM_INIT_ACK      = 0x0010,
    CMD_BARSM_TO_AACM_PROCESSES     = 0x0011,
    CMD_SYSINIT                     = 0x000B,   // send
};

enum errorCodes
{
    GE_SUCCESS                          = 0,
    GE_REGN_TIMEOUT,
    GE_PACKET_ERR,
    GE_INVALID_COMMAND_ID,
    GE_INVALID_HOST_OS,
    GE_INVALID_PROCESS_ID,
    GE_INVALID_PROCESS_NAME,
    GE_INVALID_NO_OF_MPS,
    GE_INVALID_MP_NUMBER,
    GE_STALE_DATA,
    GE_DATA_NOT_AVAIL,
    GE_BARSM_TO_AACM_ERR,
    GE_AACM_TO_BARSM_ERR, 
};

struct child_pid_list_struct
{
    pid_t child_pid;
    const char *dir;
    char *item_name;
    char proc_name[4];
    int32_t alive;
    struct child_pid_list_struct *next;
};

typedef struct child_pid_list_struct child_pid_list;
child_pid_list *first_node, *nth_node;

char barsm_name[4];

/* DIRECTORIES TO OPEN/READ */
const char *dirs[] = 
{
    "/opt/rc360/system/",
    "/opt/rc360/modules/GE/",
    "/opt/rc360/modules/TPA/",
    "/opt/rc360/apps/GE/",
    "/opt/rc360/apps/TPA/"
};

/* From barsm_functions.c */
bool send_barsmToAacmInit(int32_t csocket);
bool recieve_barsmToAacmInitAck(int32_t csocket);
void receive_aacmToBarsm(int32_t csocket);
void send_aacmToBarsmAck(int32_t csocket);
bool process_sysInit(int32_t csocket);
void assign_procName(char * pName);
char rand_letter(void);
bool send_barsmToAacmProcesses(int32_t csocket, child_pid_list *tmp_node);

/* From barsm.c */
int32_t launch_item( const char *directory );
bool restart_process(child_pid_list *tmp_node);
bool check_modules(child_pid_list *tmp_node);
bool restart_select(pid_t pid);
bool aacmSetup(void);
bool TCPsetup(void);
bool UDPsetup(void);
void* rcv_errMsgs(void *param);
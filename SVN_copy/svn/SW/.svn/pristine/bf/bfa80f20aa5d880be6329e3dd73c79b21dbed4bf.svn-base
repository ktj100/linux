## the original makefile gives errors for warnings.  I'm still working through some of the warnings, so I'm using 
## my own makefile to check functionality.  This needs to revert back to the original.  
CC=gcc
CFLAGS=-I -g.
DEPS = src/simm_functions.h src/fpga_sim.h src/sensor.h
OBJ = src/simm.o src/simm_functions.o src/fpga_sim.o src/sensor.o

%.o: %.c $(DEPS)
	$(CC) -c -o $@ $< $(CFLAGS)

simm: $(OBJ)
	gcc -pthread -o $@ $^ $(CFLAGS)


##
## File: makefile.testing
## Copyright (c) 2015, DornerWorks, Ltd.
##
## Description:
##  This makefile is used to compile a standalone-testing version of the SIMM
##  (Sensor Interface Master Module) RC360 software application.
#
#CC          := gcc
#AR          := ar
#AS          := as
#LINKER      := ld
#RANLIB      := ranlib
#SIZE        := size
#OBJCOPY     := objcopy
#OBJDUMP     := objdump
#
#TARGET      := simm
#SYS         := $(shell $(CC) -dumpmachine)
#
#ASMDIR      :=
#LIBDIR      :=
#SRCDIR      := src
#INCDIR      := src
#BUILDDIR    := build
#LIBS        := z rt
#DYNLIBS	    :=
#LIBPATHS    :=
#
#LIBSRC      := $(foreach dir, $(LIBDIR), $(wildcard $(dir)/*.c))
#LIBOBJS     := $(patsubst %.c, $(BUILDDIR)/%.o, $(notdir $(LIBSRC)))
#LIBARCHIVES := $(LIBOBJS:.o=.a)
#
#EXCLUDESRC  := $(LIBSRC)
#
#SOURCES     := $(filter-out $(EXCLUDESRC), $(foreach dir, $(SRCDIR), $(wildcard $(dir)/*.c)))
#OBJECTS     := $(patsubst %.c, $(BUILDDIR)/%.o, $(notdir $(SOURCES)))
#DEPS        := $(OBJECTS:.o=.d) $(LIBOBJS:.o=.d)
#
#OPTFLAGS    := -O2
#DEBUGFLAGS  := -g -O0
#
## Some flags taken from recommeded list here:
## https://www.gnu.org/software/gsl/manual/html_node/GCC-warning-options-for-numerical-programs.html
#CFLAGS      := -std=gnu11 -pedantic -Werror -Wall -W -Wmissing-prototypes -Wstrict-prototypes -Wshadow -Wpointer-arith -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wnested-externs -fno-common -Wswitch -Wredundant-decls -Wreturn-type -Wextra -Wunused -Wno-main -Wuninitialized -Wunused-result -Wno-override-init -Wdeclaration-after-statement -Wmissing-declarations -Wundef -fstrict-aliasing -Wstrict-aliasing=3 -Wunused-function -Wformat=2
#ASFLAGS     :=
## When built with this makefile, always build the workstation/testing version
#CPPFLAGS    := $(INCDIR:%=-I%) -D_GNU_SOURCE -DTESTING
#LIBDEPS     := $(DYNLIBS:%=-l%) $(LIBS:%=-l%)
#
#ifneq ($(wildcard $(LIBSRC)), )
## If there are source and object files to create libraries, include the build
## directory as a location to look for library files
#LIBPATHS    += $(BUILDDIR)
#endif
#
## In cygwin shared libraries must be identified by full name
#ifneq (,$(findstring cygwin, $(SYS)))
#LDFLAGS     := -Wl,-Map=$(BUILDDIR)/$(TARGET).map $(LIBPATHS:%=-Wl,-rpath,'$$ORIGIN/%') $(LIBPATHS:%=-L%) $(DYNLIBS:%=-l:lib%.so) $(LIBS:%=-l%)
#else
#LDFLAGS     := -Wl,-Map=$(BUILDDIR)/$(TARGET).map $(LIBPATHS:%=-Wl,-rpath,'$$ORIGIN/%') $(LIBPATHS:%=-L%) $(LIBDEPS)
#endif
#
## Add --track-fds=yes to check if there are any FDs left open
#MEMCHECK_OPTS := --read-var-info=yes --leak-check=full --track-origins=yes --show-reachable=yes --malloc-fill=B5 --free-fill=4A
#
#TARGETS     := $(BUILDDIR)/$(TARGET)
#MAPS        := $(TARGETS:%=%.map)
#OBJDUMPS    := $(TARGETS:%=%.dump)
#
#ifneq (,$(findstring linux, $(SYS)))
## Some additional flags are recommended for linux, but not recognized in cygwin
#CFLAGS += -fPIC -pthread
#LDFLAGS += -pthread
#else
## This flag is set by "-pthread" on linux, but cygwin does not support the
## "-pthread" option so force _REENTRANT to be defined instead
#CPPFLAGS += -D_REENTRANT
#endif
#
#vpath %.s $(ASMDIR)
#vpath %.c $(SRCDIR)
#vpath %.o $(BUILDDIR)
#vpath %.a $(BUILDDIR) ../lib
#vpath %.so $(BUILDDIR) ../lib
#
#.PHONY: all
#.DEFAULT: all
#all: CFLAGS += $(OPTFLAGS)
#all: $(BUILDDIR)/$(TARGET)
#
#.PHONY: debug
#debug: CPPFLAGS += -DDEBUG
#debug: CFLAGS += $(DEBUGFLAGS)
#debug: $(BUILDDIR)/$(TARGET)
#
#.PHONY: profile
#profile: CPPFLAGS += -DPROFILE
#profile: all
#	valgrind $(MEMCHECK_OPTS) --suppressions=valgrind.supp --log-file=$(TARGET).profile $(BUILDDIR)/$(TARGET)
#
#.PHONY: clean
#clean:
#ifneq ($(wildcard $(DEPS)), )
#	rm -f $(wildcard $(DEPS))
#endif
#ifneq ($(wildcard $(LIBOBJS)), )
#	rm -f $(wildcard $(LIBOBJS))
#endif
#ifneq ($(wildcard $(OBJECTS)), )
#	rm -f $(wildcard $(OBJECTS))
#endif
#ifneq ($(wildcard $(LIBARCHIVES)), )
#	rm -f $(wildcard $(LIBARCHIVES))
#endif
#ifneq ($(wildcard $(MAPS)), )
#	rm -f $(wildcard $(MAPS))
#endif
#ifneq ($(wildcard $(OBJDUMPS)), )
#	rm -f $(wildcard $(OBJDUMPS))
#endif
#ifneq ($(wildcard $(TARGET).profile), )
#	rm -f $(wildcard $(TARGET).profile)
#endif
#ifneq ($(wildcard $(TARGETS)), )
#	rm -f $(wildcard $(TARGETS))
#endif
#	@if test -d "$(BUILDDIR)"; then rmdir -v $(BUILDDIR); fi
#
#.PHONY: objdump
#objdump: $(BUILDDIR)/$(TARGET)
#	$(OBJDUMP) -DS $(BUILDDIR)/$(TARGET) > $(BUILDDIR)/$(TARGET).dump
#
#$(BUILDDIR):
#	mkdir -p $(BUILDDIR)
#
#-include $(DEPS)
#
#$(BUILDDIR)/%.o: %.s | $(BUILDDIR)
#	$(CC) -c $(ASFLAGS) -o $@ $<
#
## The -MMD flag here causes gcc to generate a .d file automatically which
## specifies include files that the source file depends on  The sed command
## appends the main makefile to the dependency list.
#$(BUILDDIR)/%.o: %.c | $(BUILDDIR)
#	$(CC) -c $(CFLAGS) $(EXTRA_FLAGS) $(CPPFLAGS) -MMD -o $@ $<
#	@sed -e '$$s/$$/ $(firstword $(MAKEFILE_LIST))/' -i $(@:%.o=%.d)
#
#$(BUILDDIR)/lib%.a: $(BUILDDIR)/%.o
#	$(AR) rcs $@ $<
#
#$(BUILDDIR)/$(TARGET): $(LIBDEPS) $(LIBARCHIVES) $(OBJECTS) $(MAKEFILE_LIST)
#	$(CC) -o $@ $(OBJECTS) $(DEBUGFLAGS) $(LDFLAGS)

